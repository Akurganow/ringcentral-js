{"version":3,"sources":["/source/core/Cache.ts","/source/core/Log.ts","ringcentral.js","/source/core/Utils.ts","/source/core/Observable.ts","/source/core/PageVisibility.ts","/source/mocks/Mock.ts","/source/mocks/Registry.ts","/source/externals/Externals.ts","/source/http/ApiResponse.ts","/source/http/Client.ts","/source/platform/Queue.ts","/source/platform/Platform.ts","/source/subscription/Subscription.ts","/source/pubnub/PubnubMock.ts","/source/pubnub/PubnubFactory.ts","/source/SDK.ts","/source/http/ClientMock.ts","/source/platform/Auth.ts"],"names":["RingCentral","RingCentral.sdk","RingCentral.sdk.core","RingCentral.sdk.core.Cache","RingCentral.sdk.core.Cache.constructor","RingCentral.sdk.core.Cache.setPrefix","RingCentral.sdk.core.Cache.setItem","RingCentral.sdk.core.Cache.removeItem","RingCentral.sdk.core.Cache.getItem","RingCentral.sdk.core.Cache.clean","RingCentral.sdk.core.Cache._prefixKey","Log","RingCentral.sdk.core.Log","RingCentral.sdk.core.Log.constructor","RingCentral.sdk.core.Log.disableAll","RingCentral.sdk.core.Log.enableAll","RingCentral.sdk.core.Log.debug","RingCentral.sdk.core.Log.info","RingCentral.sdk.core.Log.warn","RingCentral.sdk.core.Log.error","RingCentral.sdk.core.Log.stack","RingCentral.sdk.core.Log._parseArguments","extend","RingCentral.sdk.core.utils","RingCentral.sdk.core.utils.extend","RingCentral.sdk.core.utils.forEach","queryStringify","RingCentral.sdk.core.utils.queryStringify","parseQueryString","RingCentral.sdk.core.utils.parseQueryString","isEmail","RingCentral.sdk.core.utils.isEmail","RingCentral.sdk.core.utils.isPhoneNumber","argumentsToArray","RingCentral.sdk.core.utils.argumentsToArray","RingCentral.sdk.core.utils.isDate","RingCentral.sdk.core.utils.isFunction","RingCentral.sdk.core.utils.isArray","isWindow","RingCentral.sdk.core.utils.isWindow","RingCentral.sdk.core.utils.isNan","RingCentral.sdk.core.utils.type","RingCentral.sdk.core.utils.isPlainObject","RingCentral.sdk.core.utils.getProperty","RingCentral.sdk.core.utils.poll","RingCentral.sdk.core.utils.stopPolling","RingCentral.sdk.core.utils.parseString","RingCentral.sdk.core.utils.parseNumber","RingCentral.sdk.core.utils.isNodeJS","RingCentral.sdk.core.utils.isBrowser","Observable","RingCentral.sdk.core.Observable","RingCentral.sdk.core.Observable.constructor","RingCentral.sdk.core.Observable.hasListeners","RingCentral.sdk.core.Observable.on","RingCentral.sdk.core.Observable.emit","RingCentral.sdk.core.Observable.off","RingCentral.sdk.core.Observable.destroy","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","RingCentral.sdk.core.PageVisibility","RingCentral.sdk.core.PageVisibility.constructor","RingCentral.sdk.core.PageVisibility.visible","RingCentral.sdk.mocks","RingCentral.sdk.mocks.Mock","RingCentral.sdk.mocks.Mock.constructor","RingCentral.sdk.mocks.Mock.path","RingCentral.sdk.mocks.Mock.method","RingCentral.sdk.mocks.Mock.test","RingCentral.sdk.mocks.Mock.getResponse","RingCentral.sdk.mocks.Mock.createResponse","RingCentral.sdk.mocks.Registry","RingCentral.sdk.mocks.Registry.constructor","RingCentral.sdk.mocks.Registry.add","RingCentral.sdk.mocks.Registry.clear","RingCentral.sdk.mocks.Registry.find","RingCentral.sdk.mocks.Registry.apiCall","RingCentral.sdk.mocks.Registry.authentication","RingCentral.sdk.mocks.Registry.logout","RingCentral.sdk.mocks.Registry.presenceLoad","RingCentral.sdk.mocks.Registry.subscribeGeneric","RingCentral.sdk.mocks.Registry.subscribeOnPresence","RingCentral.sdk.mocks.Registry.tokenRefresh","RingCentral.sdk.externals","RingCentral.sdk.externals.get","ApiResponse","RingCentral.sdk.http.ApiResponse","RingCentral.sdk.http.ApiResponse.constructor","RingCentral.sdk.http.ApiResponse.response","RingCentral.sdk.http.ApiResponse.request","RingCentral.sdk.http.ApiResponse.ok","RingCentral.sdk.http.ApiResponse.text","RingCentral.sdk.http.ApiResponse.json","RingCentral.sdk.http.ApiResponse.error","RingCentral.sdk.http.ApiResponse.multipart","RingCentral.sdk.http.ApiResponse.multipartJson","RingCentral.sdk.http.ApiResponse._isContentType","RingCentral.sdk.http.ApiResponse._getContentType","RingCentral.sdk.http.ApiResponse._isMultipart","RingCentral.sdk.http.ApiResponse._isUrlEncoded","RingCentral.sdk.http.ApiResponse._isJson","RingCentral.sdk.http.ApiResponse.create","RingCentral.sdk.http","RingCentral.sdk.http.Client","RingCentral.sdk.http.Client.constructor","RingCentral.sdk.http.Client.sendRequest","RingCentral.sdk.http.Client._loadResponse","RingCentral.sdk.http.Client.makeError","RingCentral.sdk.http.Client.cloneResponse","RingCentral.sdk.http.Client.createResponse","RingCentral.sdk.http.Client.createRequest","RingCentral.sdk.platform","RingCentral.sdk.platform.Queue","RingCentral.sdk.platform.Queue.constructor","RingCentral.sdk.platform.Queue.isPaused","RingCentral.sdk.platform.Queue.pause","RingCentral.sdk.platform.Queue.resume","RingCentral.sdk.platform.Queue.poll","RingCentral.sdk.platform.Queue.releaseTimeout","RingCentral.sdk.platform.Queue.pollInterval","RingCentral.sdk.platform.Queue.setReleaseTimeout","RingCentral.sdk.platform.Queue.setPollInterval","RingCentral.sdk.platform.Platform","RingCentral.sdk.platform.Platform.constructor","RingCentral.sdk.platform.Platform.auth","RingCentral.sdk.platform.Platform.createUrl","RingCentral.sdk.platform.Platform.authUrl","RingCentral.sdk.platform.Platform.parseAuthRedirectUrl","RingCentral.sdk.platform.Platform.loggedIn","RingCentral.sdk.platform.Platform.login","RingCentral.sdk.platform.Platform.refresh","RingCentral.sdk.platform.Platform.logout","RingCentral.sdk.platform.Platform.inflateRequest","RingCentral.sdk.platform.Platform.sendRequest","RingCentral.sdk.platform.Platform.send","RingCentral.sdk.platform.Platform.get","RingCentral.sdk.platform.Platform.post","RingCentral.sdk.platform.Platform.put","RingCentral.sdk.platform.Platform.delete","RingCentral.sdk.platform.Platform._tokenRequest","RingCentral.sdk.platform.Platform._ensureAuthentication","RingCentral.sdk.platform.Platform._isAccessTokenValid","RingCentral.sdk.platform.Platform._refreshPolling","RingCentral.sdk.platform.Platform._apiKey","RingCentral.sdk.platform.Platform._authHeader","RingCentral.sdk.subscription","RingCentral.sdk.subscription.Subscription","RingCentral.sdk.subscription.Subscription.constructor","RingCentral.sdk.subscription.Subscription.alive","RingCentral.sdk.subscription.Subscription.setSubscription","RingCentral.sdk.subscription.Subscription.subscription","RingCentral.sdk.subscription.Subscription.register","RingCentral.sdk.subscription.Subscription.addEvents","RingCentral.sdk.subscription.Subscription.setEvents","RingCentral.sdk.subscription.Subscription.subscribe","RingCentral.sdk.subscription.Subscription.renew","RingCentral.sdk.subscription.Subscription.remove","RingCentral.sdk.subscription.Subscription.reset","RingCentral.sdk.subscription.Subscription.destroy","RingCentral.sdk.subscription.Subscription._getFullEventFilters","RingCentral.sdk.subscription.Subscription._setTimeout","RingCentral.sdk.subscription.Subscription._clearTimeout","RingCentral.sdk.subscription.Subscription._decrypt","RingCentral.sdk.subscription.Subscription._notify","RingCentral.sdk.subscription.Subscription._subscribeAtPubnub","RingCentral.sdk.pubnub","RingCentral.sdk.pubnub.PubnubMock","RingCentral.sdk.pubnub.PubnubMock.constructor","RingCentral.sdk.pubnub.PubnubMock.subscribe","RingCentral.sdk.pubnub.PubnubMock.unsubscribe","RingCentral.sdk.pubnub.PubnubMock.receiveMessage","RingCentral.sdk.pubnub.PubnubMockFactory","RingCentral.sdk.pubnub.PubnubMockFactory.constructor","RingCentral.sdk.pubnub.PubnubMockFactory.init","RingCentral.sdk.pubnub.PubnubFactory","RingCentral.sdk.pubnub.PubnubFactory.constructor","RingCentral.sdk.pubnub.PubnubFactory.getPubnub","RingCentral.sdk.SDK","RingCentral.sdk.SDK.constructor","RingCentral.sdk.SDK.platform","RingCentral.sdk.SDK.cache","RingCentral.sdk.SDK.createSubscription","RingCentral.sdk.SDK.createPageVisibility","RingCentral.sdk.SDK.createObservable","RingCentral.sdk.SDK.log","RingCentral.sdk.SDK.utils","RingCentral.sdk.SDK.mockRegistry","e","sdk","externals","get","define","amd","PUBNUB","_PUBNUB","module","exports","require","_Promise","Promise","_fetch","_Request","_Response","_Headers","RingCentral.sdk.http.ClientMock","RingCentral.sdk.http.ClientMock.constructor","RingCentral.sdk.http.ClientMock._loadResponse","RingCentral.sdk.platform.Auth","RingCentral.sdk.platform.Auth.constructor","RingCentral.sdk.platform.Auth.accessToken","RingCentral.sdk.platform.Auth.refreshToken","RingCentral.sdk.platform.Auth.tokenType","RingCentral.sdk.platform.Auth.data","RingCentral.sdk.platform.Auth.setData","RingCentral.sdk.platform.Auth.accessTokenValid","RingCentral.sdk.platform.Auth.refreshTokenValid","RingCentral.sdk.platform.Auth.cancelAccessToken","RingCentral.sdk.platform.Auth.forceAuthentication","RingCentral.sdk.platform.Auth.setRemember","RingCentral.sdk.platform.Auth.remember"],"mappings":"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","file":"ringcentral.min.js","sourcesContent":["module RingCentral.sdk.core {\n\n    export class Cache {\n\n        private _storage:Storage;\n        private _prefix:string;\n\n        constructor(storage:Storage|any, prefix?:string) {\n            this.setPrefix(prefix);\n            this._storage = storage;\n        }\n\n        setPrefix(prefix?:string) {\n            this._prefix = prefix || 'rc-';\n            return this;\n        }\n\n        setItem(key, data) {\n            this._storage[this._prefixKey(key)] = JSON.stringify(data);\n            return this;\n        }\n\n        removeItem(key) {\n            delete this._storage[this._prefixKey(key)];\n            return this;\n        }\n\n        getItem(key) {\n            var item = this._storage[this._prefixKey(key)];\n            if (!item) return null;\n            return JSON.parse(item);\n        }\n\n        clean() {\n\n            for (var key in this._storage) {\n\n                if (!this._storage.hasOwnProperty(key)) continue;\n\n                if (key.indexOf(this._prefix) === 0) {\n                    delete this._storage[key];\n                }\n\n            }\n\n            return this;\n\n        }\n\n        protected _prefixKey(key) {\n            return this._prefix + key;\n        }\n\n    }\n\n}\n\n","module RingCentral.sdk.core {\n\n    /**\n     * TODO Fix public vars\n     */\n    export class Log {\n\n        public _console:Console;\n        public logDebug:boolean;\n        public logInfo:boolean;\n        public logWarnings:boolean;\n        public logErrors:boolean;\n        public addTimestamps:boolean;\n\n        constructor(console?:Console) {\n\n            if (!console) {\n                console = <Console>{ // safety\n                    log: () => {},\n                    warn: () => {},\n                    info: () => {},\n                    error: () => {}\n                };\n            }\n\n            this._console = console;\n\n            this.logDebug = false;\n            this.logInfo = false;\n            this.logWarnings = false;\n            this.logErrors = false;\n\n            this.addTimestamps = false;\n\n        }\n\n        disableAll() {\n            this.logDebug = false;\n            this.logInfo = false;\n            this.logWarnings = false;\n            this.logErrors = false;\n        }\n\n        enableAll() {\n            this.logDebug = true;\n            this.logInfo = true;\n            this.logWarnings = true;\n            this.logErrors = true;\n        }\n\n        debug(...args) {\n            if (this.logDebug) this._console.log.apply(this._console, this._parseArguments(arguments));\n        }\n\n        info(...args) {\n            if (this.logInfo) this._console.info.apply(this._console, this._parseArguments(arguments));\n        }\n\n        warn(...args) {\n            if (this.logWarnings) this._console.warn.apply(this._console, this._parseArguments(arguments));\n        }\n\n        error(...args) {\n            if (this.logErrors) this._console.error.apply(this._console, this._parseArguments(arguments));\n        }\n\n        stack() {\n            var e = <any> new Error();\n            if (e.hasOwnProperty('stack')) {\n                return e.stack.replace('Error\\n', 'Stack Trace\\n');\n            }\n        }\n\n        protected _parseArguments(args) {\n            args = utils.argumentsToArray(args);\n            if (this.addTimestamps) args.unshift(new Date().toLocaleString(), '-');\n            return args;\n        }\n\n    }\n\n    export var log = new Log();\n\n}","var RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var core;\n        (function (core) {\n            var Cache = (function () {\n                function Cache(storage, prefix) {\n                    this.setPrefix(prefix);\n                    this._storage = storage;\n                }\n                Cache.prototype.setPrefix = function (prefix) {\n                    this._prefix = prefix || 'rc-';\n                    return this;\n                };\n                Cache.prototype.setItem = function (key, data) {\n                    this._storage[this._prefixKey(key)] = JSON.stringify(data);\n                    return this;\n                };\n                Cache.prototype.removeItem = function (key) {\n                    delete this._storage[this._prefixKey(key)];\n                    return this;\n                };\n                Cache.prototype.getItem = function (key) {\n                    var item = this._storage[this._prefixKey(key)];\n                    if (!item)\n                        return null;\n                    return JSON.parse(item);\n                };\n                Cache.prototype.clean = function () {\n                    for (var key in this._storage) {\n                        if (!this._storage.hasOwnProperty(key))\n                            continue;\n                        if (key.indexOf(this._prefix) === 0) {\n                            delete this._storage[key];\n                        }\n                    }\n                    return this;\n                };\n                Cache.prototype._prefixKey = function (key) {\n                    return this._prefix + key;\n                };\n                return Cache;\n            })();\n            core.Cache = Cache;\n        })(core = sdk.core || (sdk.core = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var core;\n        (function (core) {\n            /**\n             * TODO Fix public vars\n             */\n            var Log = (function () {\n                function Log(console) {\n                    if (!console) {\n                        console = {\n                            log: function () { },\n                            warn: function () { },\n                            info: function () { },\n                            error: function () { }\n                        };\n                    }\n                    this._console = console;\n                    this.logDebug = false;\n                    this.logInfo = false;\n                    this.logWarnings = false;\n                    this.logErrors = false;\n                    this.addTimestamps = false;\n                }\n                Log.prototype.disableAll = function () {\n                    this.logDebug = false;\n                    this.logInfo = false;\n                    this.logWarnings = false;\n                    this.logErrors = false;\n                };\n                Log.prototype.enableAll = function () {\n                    this.logDebug = true;\n                    this.logInfo = true;\n                    this.logWarnings = true;\n                    this.logErrors = true;\n                };\n                Log.prototype.debug = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i - 0] = arguments[_i];\n                    }\n                    if (this.logDebug)\n                        this._console.log.apply(this._console, this._parseArguments(arguments));\n                };\n                Log.prototype.info = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i - 0] = arguments[_i];\n                    }\n                    if (this.logInfo)\n                        this._console.info.apply(this._console, this._parseArguments(arguments));\n                };\n                Log.prototype.warn = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i - 0] = arguments[_i];\n                    }\n                    if (this.logWarnings)\n                        this._console.warn.apply(this._console, this._parseArguments(arguments));\n                };\n                Log.prototype.error = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i - 0] = arguments[_i];\n                    }\n                    if (this.logErrors)\n                        this._console.error.apply(this._console, this._parseArguments(arguments));\n                };\n                Log.prototype.stack = function () {\n                    var e = new Error();\n                    if (e.hasOwnProperty('stack')) {\n                        return e.stack.replace('Error\\n', 'Stack Trace\\n');\n                    }\n                };\n                Log.prototype._parseArguments = function (args) {\n                    args = core.utils.argumentsToArray(args);\n                    if (this.addTimestamps)\n                        args.unshift(new Date().toLocaleString(), '-');\n                    return args;\n                };\n                return Log;\n            })();\n            core.Log = Log;\n            core.log = new Log();\n        })(core = sdk.core || (sdk.core = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var core;\n        (function (core) {\n            var utils;\n            (function (utils) {\n                var hasOwn = Object.prototype.hasOwnProperty, toString = Object.prototype.toString, rdigit = /\\d/, class2type = {};\n                // Populate the class2type map\n                'Boolean Number String Function Array Date RegExp Object'.split(' ').forEach(function (name) {\n                    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n                });\n                /**\n                 * Ported from jQuery.fn.extend\n                 * Optional first parameter makes deep copy\n                 */\n                function extend(targetObject, sourceObject) {\n                    var args = [];\n                    for (var _i = 2; _i < arguments.length; _i++) {\n                        args[_i - 2] = arguments[_i];\n                    }\n                    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;\n                    // Handle a deep copy situation\n                    if (typeof target === \"boolean\") {\n                        deep = target;\n                        // skip the boolean and the target\n                        target = arguments[i] || {};\n                        i++;\n                    }\n                    // Handle case when target is a string or something (possible in deep copy)\n                    if (typeof target !== \"object\" && !isFunction(target)) {\n                        target = {};\n                    }\n                    for (; i < length; i++) {\n                        // Only deal with non-null/undefined values\n                        if ((options = arguments[i]) !== null) {\n                            // Extend the base object\n                            for (name in options) {\n                                src = target[name];\n                                copy = options[name];\n                                // Prevent never-ending loop\n                                if (target === copy) {\n                                    continue;\n                                }\n                                // Recurse if we're merging plain objects or arrays\n                                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n                                    if (copyIsArray) {\n                                        copyIsArray = false;\n                                        clone = src && isArray(src) ? src : [];\n                                    }\n                                    else {\n                                        clone = src && isPlainObject(src) ? src : {};\n                                    }\n                                    // Never move original objects, clone them\n                                    target[name] = extend(deep, clone, copy);\n                                }\n                                else if (copy !== undefined) {\n                                    target[name] = copy;\n                                }\n                            }\n                        }\n                    }\n                    // Return the modified object\n                    return target;\n                }\n                utils.extend = extend;\n                function forEach(object, cb) {\n                    for (var i in object) {\n                        if (!object.hasOwnProperty(i))\n                            continue;\n                        var res = cb(object[i], i);\n                        if (res === false)\n                            break;\n                    }\n                }\n                utils.forEach = forEach;\n                /**\n                 * TODO Replace with something better\n                 * @see https://github.com/joyent/node/blob/master/lib/querystring.js\n                 * @param {object} parameters\n                 * @returns {string}\n                 */\n                function queryStringify(parameters) {\n                    var array = [];\n                    forEach(parameters, function (v, i) {\n                        if (isArray(v)) {\n                            v.forEach(function (vv) {\n                                array.push(encodeURIComponent(i) + '=' + encodeURIComponent(vv));\n                            });\n                        }\n                        else {\n                            array.push(encodeURIComponent(i) + '=' + encodeURIComponent(v));\n                        }\n                    });\n                    return array.join('&');\n                }\n                utils.queryStringify = queryStringify;\n                /**\n                 * TODO Replace with something better\n                 * @see https://github.com/joyent/node/blob/master/lib/querystring.js\n                 * @param {string} queryString\n                 * @returns {object}\n                 */\n                function parseQueryString(queryString) {\n                    var argsParsed = {}, self = this;\n                    queryString.split('&').forEach(function (arg) {\n                        arg = decodeURIComponent(arg);\n                        if (arg.indexOf('=') == -1) {\n                            argsParsed[arg.trim()] = true;\n                        }\n                        else {\n                            var pair = arg.split('='), key = pair[0].trim(), value = pair[1].trim();\n                            if (key in argsParsed) {\n                                if (key in argsParsed && !self.isArray(argsParsed[key]))\n                                    argsParsed[key] = [argsParsed[key]];\n                                argsParsed[key].push(value);\n                            }\n                            else {\n                                argsParsed[key] = value;\n                            }\n                        }\n                    });\n                    return argsParsed;\n                }\n                utils.parseQueryString = parseQueryString;\n                /**\n                 * Returns true if the passed value is valid email address.\n                 * Checks multiple comma separated emails according to RFC 2822 if parameter `multiple` is `true`\n                 */\n                function isEmail(v, multiple) {\n                    if (!!multiple) {\n                        //this Regexp is also suitable for multiple emails (comma separated)\n                        return /^(?:[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?[ ,;]*)+$/i.test(v);\n                    }\n                    else {\n                        return /^[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(v);\n                    }\n                }\n                utils.isEmail = isEmail;\n                function isPhoneNumber(v) {\n                    return (/\\+?1[0-9]{3}[0-9a-z]{7}/im.test(v.toString().split(/[^0-9a-z\\+]/im).join('')));\n                }\n                utils.isPhoneNumber = isPhoneNumber;\n                /**\n                 * @param args\n                 * @returns {Array}\n                 */\n                function argumentsToArray(args) {\n                    return Array.prototype.slice.call(args || [], 0);\n                }\n                utils.argumentsToArray = argumentsToArray;\n                function isDate(obj) {\n                    return type(obj) === \"date\";\n                }\n                utils.isDate = isDate;\n                function isFunction(obj) {\n                    return type(obj) === \"function\";\n                }\n                utils.isFunction = isFunction;\n                function isArray(obj) {\n                    return Array.isArray ? Array.isArray(obj) : type(obj) === \"array\";\n                }\n                utils.isArray = isArray;\n                // A crude way of determining if an object is a window\n                function isWindow(obj) {\n                    return obj && typeof obj === \"object\" && \"setInterval\" in obj;\n                }\n                utils.isWindow = isWindow;\n                function isNan(obj) {\n                    return obj === null || !rdigit.test(obj) || isNaN(obj);\n                }\n                utils.isNan = isNan;\n                function type(obj) {\n                    return obj === null\n                        ? String(obj)\n                        : class2type[toString.call(obj)] || \"object\";\n                }\n                utils.type = type;\n                function isPlainObject(obj) {\n                    // Must be an Object.\n                    // Because of IE, we also have to check the presence of the constructor property.\n                    // Make sure that DOM nodes and window objects don't pass through, as well\n                    if (!obj || type(obj) !== \"object\" || obj.nodeType || isWindow(obj)) {\n                        return false;\n                    }\n                    // Not own constructor property must be Object\n                    if (obj.constructor && !hasOwn.call(obj, \"constructor\") && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n                        return false;\n                    }\n                    // Own properties are enumerated firstly, so to speed up,\n                    // if last one is own, then all properties are own.\n                    var key;\n                    for (key in obj) { }\n                    return key === undefined || hasOwn.call(obj, key);\n                }\n                utils.isPlainObject = isPlainObject;\n                function getProperty(obj, property) {\n                    return property\n                        .split(/[.[\\]]/)\n                        .reduce(function (res, part) {\n                        if (!res)\n                            return undefined;\n                        return part ? res[part] : res;\n                    }, obj);\n                }\n                utils.getProperty = getProperty;\n                function poll(fn, interval, timeout) {\n                    stopPolling(timeout);\n                    interval = interval || 1000;\n                    var next = function (delay) {\n                        delay = delay || interval;\n                        interval = delay;\n                        return setTimeout(function () {\n                            fn(next, delay);\n                        }, delay);\n                    };\n                    return next();\n                }\n                utils.poll = poll;\n                function stopPolling(timeout) {\n                    if (timeout)\n                        clearTimeout(timeout);\n                }\n                utils.stopPolling = stopPolling;\n                function parseString(s) {\n                    return s ? s.toString() : '';\n                }\n                utils.parseString = parseString;\n                function parseNumber(n) {\n                    if (!n)\n                        return 0;\n                    n = parseFloat(n);\n                    return isNan(n) ? 0 : n;\n                }\n                utils.parseNumber = parseNumber;\n                function isNodeJS() {\n                    return (typeof process !== 'undefined');\n                }\n                utils.isNodeJS = isNodeJS;\n                function isBrowser() {\n                    return (typeof window !== 'undefined');\n                }\n                utils.isBrowser = isBrowser;\n            })(utils = core.utils || (core.utils = {}));\n        })(core = sdk.core || (sdk.core = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"./Log.ts\" />\n/// <reference path=\"./Utils.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var core;\n        (function (core) {\n            /**\n             * @see https://github.com/Microsoft/TypeScript/issues/275\n             */\n            var Observable = (function () {\n                function Observable() {\n                    if (!(this instanceof Observable))\n                        throw new Error('Observable(): New operator was omitted');\n                    this.off();\n                }\n                Observable.prototype.hasListeners = function (event) {\n                    return (event in this._listeners);\n                };\n                Observable.prototype.on = function (events, callback) {\n                    var _this = this;\n                    if (typeof events == 'string')\n                        events = [events];\n                    if (!events)\n                        throw new Error('No events to subscribe to');\n                    if (typeof callback !== 'function')\n                        throw new Error('Callback must be a function');\n                    events.forEach(function (event) {\n                        if (!_this.hasListeners(event))\n                            _this._listeners[event] = [];\n                        _this._listeners[event].push(callback);\n                    });\n                    return this;\n                };\n                Observable.prototype.emit = function (event) {\n                    var _this = this;\n                    var args = [];\n                    for (var _i = 1; _i < arguments.length; _i++) {\n                        args[_i - 1] = arguments[_i];\n                    }\n                    var result = null;\n                    if (!this.hasListeners(event))\n                        return null;\n                    this._listeners[event].some(function (callback) {\n                        result = callback.apply(_this, args);\n                        return (result === false);\n                    });\n                    return result;\n                };\n                Observable.prototype.off = function (event, callback) {\n                    var _this = this;\n                    if (!event) {\n                        this._listeners = {};\n                    }\n                    else {\n                        if (!callback) {\n                            delete this._listeners[event];\n                        }\n                        else {\n                            if (!this.hasListeners(event))\n                                return this;\n                            this._listeners[event].forEach(function (cb, i) {\n                                if (cb === callback)\n                                    delete _this._listeners[event][i];\n                            });\n                        }\n                    }\n                    return this;\n                };\n                Observable.prototype.destroy = function () {\n                    this.off();\n                    core.log.debug('Observable.destroy(): Listeners were destroyed');\n                    return this;\n                };\n                return Observable;\n            })();\n            core.Observable = Observable;\n        })(core = sdk.core || (sdk.core = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"./Observable.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var core;\n        (function (core) {\n            var PageVisibility = (function (_super) {\n                __extends(PageVisibility, _super);\n                function PageVisibility() {\n                    var _this = this;\n                    _super.call(this);\n                    this.events = {\n                        change: 'change'\n                    };\n                    var hidden = \"hidden\", onchange = function (evt) {\n                        evt = evt || window.event;\n                        var v = 'visible', h = 'hidden', evtMap = {\n                            focus: v, focusin: v, pageshow: v, blur: h, focusout: h, pagehide: h\n                        };\n                        _this._visible = (evt.type in evtMap) ? evtMap[evt.type] == v : !document[hidden];\n                        _this.emit(_this.events.change, _this._visible);\n                    };\n                    this._visible = true;\n                    if (typeof document == 'undefined' || typeof window == 'undefined')\n                        return;\n                    // Standards:\n                    if (hidden in document)\n                        document.addEventListener(\"visibilitychange\", onchange);\n                    else if ((hidden = \"mozHidden\") in document)\n                        document.addEventListener(\"mozvisibilitychange\", onchange);\n                    else if ((hidden = \"webkitHidden\") in document)\n                        document.addEventListener(\"webkitvisibilitychange\", onchange);\n                    else if ((hidden = \"msHidden\") in document)\n                        document.addEventListener(\"msvisibilitychange\", onchange);\n                    else if ('onfocusin' in document)\n                        document.onfocusin = document.onfocusout = onchange;\n                    else\n                        window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;\n                }\n                PageVisibility.prototype.visible = function () {\n                    return this._visible;\n                };\n                return PageVisibility;\n            })(core.Observable);\n            core.PageVisibility = PageVisibility;\n        })(core = sdk.core || (sdk.core = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var mocks;\n        (function (mocks) {\n            var Mock = (function () {\n                function Mock(method, path, json, status, statusText, delay) {\n                    this._method = method.toUpperCase();\n                    this._path = path;\n                    this._json = json || {};\n                    this._delay = delay || 10;\n                    this._status = status || 200;\n                    this._statusText = statusText || 'OK';\n                }\n                Mock.prototype.path = function () {\n                    return this._path;\n                };\n                Mock.prototype.method = function () {\n                    return this._method;\n                };\n                Mock.prototype.test = function (request) {\n                    return request.url.indexOf(this._path) > -1 &&\n                        request.method.toUpperCase() == this._method;\n                };\n                Mock.prototype.getResponse = function (request) {\n                    var _this = this;\n                    return new sdk.externals._Promise(function (resolve, reject) {\n                        setTimeout(function () {\n                            resolve(_this.createResponse(_this._json));\n                        }, _this._delay);\n                    });\n                };\n                Mock.prototype.createResponse = function (json, init) {\n                    init = init || {};\n                    init.status = init.status || this._status;\n                    init.statusText = init.statusText || this._statusText;\n                    var str = JSON.stringify(json), res = sdk.http.Client.createResponse(str, init);\n                    res.headers.set(sdk.http.ApiResponse.contentType, sdk.http.ApiResponse.jsonContentType);\n                    return res;\n                };\n                return Mock;\n            })();\n            mocks.Mock = Mock;\n        })(mocks = sdk.mocks || (sdk.mocks = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"./Mock.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var mocks;\n        (function (mocks) {\n            var Registry = (function () {\n                function Registry() {\n                    this._mocks = [];\n                }\n                Registry.prototype.add = function (mock) {\n                    this._mocks.push(mock);\n                    return this;\n                };\n                Registry.prototype.clear = function () {\n                    this._mocks = [];\n                    return this;\n                };\n                Registry.prototype.find = function (request) {\n                    //console.log('Registry is looking for', request);\n                    var mock = this._mocks.shift();\n                    if (!mock)\n                        throw new Error('No mock in registry for request ' + request.method + ' ' + request.url);\n                    if (!mock.test(request))\n                        throw new Error('Wrong request ' + request.method + ' ' + request.url +\n                            ' for expected mock ' + mock.method() + ' ' + mock.path());\n                    return mock;\n                };\n                Registry.prototype.apiCall = function (method, path, response, status, statusText) {\n                    this.add(new mocks.Mock(method, path, response, status, statusText));\n                    return this;\n                };\n                Registry.prototype.authentication = function () {\n                    this.apiCall('POST', '/restapi/oauth/token', {\n                        'access_token': 'ACCESS_TOKEN',\n                        'token_type': 'bearer',\n                        'expires_in': 3600,\n                        'refresh_token': 'REFRESH_TOKEN',\n                        'refresh_token_expires_in': 60480,\n                        'scope': 'SMS RCM Foo Boo',\n                        'expireTime': new Date().getTime() + 3600000\n                    });\n                    return this;\n                };\n                Registry.prototype.logout = function () {\n                    this.apiCall('POST', '/restapi/oauth/revoke', {});\n                    return this;\n                };\n                Registry.prototype.presenceLoad = function (id) {\n                    this.apiCall('GET', '/restapi/v1.0/account/~/extension/' + id + '/presence', {\n                        \"uri\": \"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/\" + id + \"/presence\",\n                        \"extension\": {\n                            \"uri\": \"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/\" + id,\n                            \"id\": id,\n                            \"extensionNumber\": \"101\"\n                        },\n                        \"activeCalls\": [],\n                        \"presenceStatus\": \"Available\",\n                        \"telephonyStatus\": \"Ringing\",\n                        \"userStatus\": \"Available\",\n                        \"dndStatus\": \"TakeAllCalls\",\n                        \"extensionId\": id\n                    });\n                    return this;\n                };\n                Registry.prototype.subscribeGeneric = function (expiresIn) {\n                    expiresIn = expiresIn || 15 * 60 * 60;\n                    var date = new Date();\n                    this.apiCall('POST', '/restapi/v1.0/subscription', {\n                        'eventFilters': [\n                            '/restapi/v1.0/account/~/extension/~/presence'\n                        ],\n                        'expirationTime': new Date(date.getTime() + (expiresIn * 1000)).toISOString(),\n                        'expiresIn': expiresIn,\n                        'deliveryMode': {\n                            'transportType': 'PubNub',\n                            'encryption': false,\n                            'address': '123_foo',\n                            'subscriberKey': 'sub-c-foo',\n                            'secretKey': 'sec-c-bar'\n                        },\n                        'id': 'foo-bar-baz',\n                        'creationTime': date.toISOString(),\n                        'status': 'Active',\n                        'uri': 'https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz'\n                    });\n                    return this;\n                };\n                Registry.prototype.subscribeOnPresence = function (id, detailed) {\n                    id = id || '1';\n                    var date = new Date();\n                    this.apiCall('POST', '/restapi/v1.0/subscription', {\n                        'eventFilters': ['/restapi/v1.0/account/~/extension/' + id + '/presence' + (detailed ? '?detailedTelephonyState=true' : '')],\n                        'expirationTime': new Date(date.getTime() + (15 * 60 * 60 * 1000)).toISOString(),\n                        'deliveryMode': {\n                            'transportType': 'PubNub',\n                            'encryption': true,\n                            'address': '123_foo',\n                            'subscriberKey': 'sub-c-foo',\n                            'secretKey': 'sec-c-bar',\n                            'encryptionAlgorithm': 'AES',\n                            'encryptionKey': 'VQwb6EVNcQPBhE/JgFZ2zw=='\n                        },\n                        'creationTime': date.toISOString(),\n                        'id': 'foo-bar-baz',\n                        'status': 'Active',\n                        'uri': 'https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz'\n                    });\n                    return this;\n                };\n                Registry.prototype.tokenRefresh = function (failure) {\n                    if (!failure) {\n                        this.apiCall('POST', '/restapi/oauth/token', {\n                            'access_token': 'ACCESS_TOKEN_FROM_REFRESH',\n                            'token_type': 'bearer',\n                            'expires_in': 3600,\n                            'refresh_token': 'REFRESH_TOKEN_FROM_REFRESH',\n                            'refresh_token_expires_in': 60480,\n                            'scope': 'SMS RCM Foo Boo'\n                        });\n                    }\n                    else {\n                        this.apiCall('POST', '/restapi/oauth/token', {\n                            'message': 'Wrong token',\n                            'error_description': 'Wrong token',\n                            'description': 'Wrong token'\n                        }, 400);\n                    }\n                    return this;\n                };\n                return Registry;\n            })();\n            mocks.Registry = Registry;\n        })(mocks = sdk.mocks || (sdk.mocks = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var externals;\n        (function (externals) {\n            externals._Promise;\n            externals._fetch;\n            externals._Response;\n            externals._Request;\n            externals._Headers;\n            externals._PUBNUB;\n            function get() {\n                var root = Function('return this')();\n                if (!externals._PUBNUB)\n                    externals._PUBNUB = root.PUBNUB;\n                if (!externals._Promise)\n                    externals._Promise = root.Promise;\n                if (!externals._fetch)\n                    externals._fetch = root.fetch;\n                if (!externals._Headers)\n                    externals._Headers = root.Headers;\n                if (!externals._Request)\n                    externals._Request = root.Request;\n                if (!externals._Response)\n                    externals._Response = root.Response;\n                return externals;\n            }\n            externals.get = get;\n        })(externals = sdk.externals || (sdk.externals = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var http;\n        (function (http) {\n            /**\n             * @TODO Bring back tests\n             */\n            var ApiResponse = (function () {\n                function ApiResponse(request, response, responseText) {\n                    this._text = responseText;\n                    this._request = request;\n                    this._response = response;\n                    this._json = null;\n                    this._multipartTransactions = null;\n                }\n                ApiResponse.prototype.response = function () {\n                    return this._response;\n                };\n                ApiResponse.prototype.request = function () {\n                    return this._request;\n                };\n                ApiResponse.prototype.ok = function () {\n                    return this._response && this._response.ok;\n                };\n                ApiResponse.prototype.text = function () {\n                    return this._text;\n                };\n                ApiResponse.prototype.json = function () {\n                    if (!this._isJson())\n                        throw new Error('Response is not JSON');\n                    if (!this._json) {\n                        this._json = this._text ? JSON.parse(this._text) : null;\n                    }\n                    return this._json;\n                };\n                ApiResponse.prototype.error = function (skipOKCheck) {\n                    if (this.ok() && !skipOKCheck)\n                        return null;\n                    var message = (this._response && this._response.status ? this._response.status + ' ' : '') +\n                        (this._response && this._response.statusText ? this._response.statusText : '');\n                    try {\n                        var json = this.json();\n                        if (json.message)\n                            message = json.message;\n                        if (json.error_description)\n                            message = json.error_description;\n                        if (json.description)\n                            message = json.description;\n                    }\n                    catch (ex) { }\n                    return message;\n                };\n                ApiResponse.prototype.multipart = function () {\n                    if (!this._isMultipart())\n                        throw new Error('Response is not multipart');\n                    if (null === this._multipartTransactions) {\n                        // Step 1. Split multipart response\n                        if (!this._text)\n                            throw new Error('No response body');\n                        var boundary = this._response.headers.get('Content-Type').match(/boundary=([^;]+)/i)[1];\n                        if (!boundary)\n                            throw new Error('Cannot find boundary');\n                        var parts = this._text.toString().split(ApiResponse.boundarySeparator + boundary);\n                        if (parts[0].trim() === '')\n                            parts.shift();\n                        if (parts[parts.length - 1].trim() == ApiResponse.boundarySeparator)\n                            parts.pop();\n                        if (parts.length < 1)\n                            throw new Error('No parts in body');\n                        // Step 2. Parse status info\n                        var statusInfo = ApiResponse.create(parts.shift(), this._response.status, this._response.statusText);\n                        // Step 3. Parse all other parts\n                        this._multipartTransactions = parts.map(function (part, i) {\n                            var status = statusInfo.json().response[i].status;\n                            return ApiResponse.create(part, status);\n                        });\n                    }\n                    return this._multipartTransactions;\n                };\n                /**\n                 * Short-hand method to get only JSON content of responses\n                 */\n                ApiResponse.prototype.multipartJson = function () {\n                    return this.multipart().map(function (res) {\n                        return res.json();\n                    });\n                };\n                ApiResponse.prototype._isContentType = function (contentType) {\n                    return this._getContentType().indexOf(contentType) > -1;\n                };\n                ApiResponse.prototype._getContentType = function () {\n                    return this._response.headers.get(ApiResponse.contentType) || '';\n                };\n                ApiResponse.prototype._isMultipart = function () {\n                    return this._isContentType(ApiResponse.multipartContentType);\n                };\n                ApiResponse.prototype._isUrlEncoded = function () {\n                    return this._isContentType(ApiResponse.urlencodedContentType);\n                };\n                ApiResponse.prototype._isJson = function () {\n                    return this._isContentType(ApiResponse.jsonContentType);\n                };\n                /**\n                 * Method is used to create Transaction objects from string parts of multipart/mixed response\n                 * @param text\n                 * @param status\n                 * @param statusText\n                 * @return {ApiResponse}\n                 */\n                ApiResponse.create = function (text, status, statusText) {\n                    status = status || 200;\n                    statusText = statusText || 'OK';\n                    text = text.replace(/\\r/g, '');\n                    var headers = new sdk.externals._Headers(), headersAndBody = text.split(ApiResponse.bodySeparator), headersText = (headersAndBody.length > 1) ? headersAndBody.shift() : '';\n                    text = headersAndBody.join(ApiResponse.bodySeparator);\n                    (headersText || '')\n                        .split('\\n')\n                        .forEach(function (header) {\n                        var split = header.trim().split(ApiResponse.headerSeparator), key = split.shift().trim(), value = split.join(ApiResponse.headerSeparator).trim();\n                        if (key)\n                            headers.append(key, value);\n                    });\n                    return new ApiResponse(null, http.Client.createResponse(text, {\n                        headers: headers,\n                        status: status,\n                        statusText: statusText\n                    }), text);\n                };\n                ApiResponse.contentType = 'Content-Type';\n                ApiResponse.jsonContentType = 'application/json';\n                ApiResponse.multipartContentType = 'multipart/mixed';\n                ApiResponse.urlencodedContentType = 'application/x-www-form-urlencoded';\n                ApiResponse.headerSeparator = ':';\n                ApiResponse.bodySeparator = '\\n\\n';\n                ApiResponse.boundarySeparator = '--';\n                return ApiResponse;\n            })();\n            http.ApiResponse = ApiResponse;\n        })(http = sdk.http || (sdk.http = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../mocks/Registry.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./ApiResponse.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var http;\n        (function (http) {\n            var allowedMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'];\n            var Client = (function (_super) {\n                __extends(Client, _super);\n                function Client() {\n                    _super.apply(this, arguments);\n                    this.events = {\n                        beforeRequest: 'beforeRequest',\n                        requestSuccess: 'requestSuccess',\n                        requestError: 'requestError' // means that request failed completely\n                    };\n                }\n                Client.prototype.sendRequest = function (request) {\n                    var _this = this;\n                    var res = new http.ApiResponse(request); //FIXME Potential leak\n                    return new sdk.externals._Promise(function (resolve) {\n                        //TODO Stop request if listeners return false\n                        _this.emit(_this.events.beforeRequest, res);\n                        resolve(_this._loadResponse(request));\n                    })\n                        .then(function (response) {\n                        res['_response'] = Client.cloneResponse(response);\n                        return response.text();\n                    })\n                        .then(function (text) {\n                        res['_text'] = text;\n                        if (!res.ok())\n                            throw Client.makeError(new Error('Response has unsuccessful status'), res);\n                        _this.emit(_this.events.requestSuccess, res);\n                        return res;\n                    })\n                        .catch(function (e) {\n                        if (!e.apiResponse) {\n                            // we don't pass response since most likely it's parsing caused an error\n                            e = Client.makeError(e, res);\n                        }\n                        _this.emit(_this.events.requestError, e);\n                        throw e;\n                    });\n                };\n                Client.prototype._loadResponse = function (request) {\n                    return sdk.externals._fetch.call(null, request);\n                };\n                /**\n                 * Wraps the JS Error object with transaction information\n                 * @param {Error} e\n                 * @param {ApiResponse} apiResponse\n                 * @return {IApiError}\n                 */\n                Client.makeError = function (e, apiResponse) {\n                    var error = e;\n                    // Wrap only if regular error\n                    if (!error.hasOwnProperty('apiResponse') && !error.hasOwnProperty('originalMessage')) {\n                        error.apiResponse = apiResponse;\n                        error.originalMessage = error.message;\n                        error.message = (apiResponse && apiResponse.error(true)) || error.originalMessage;\n                    }\n                    return error;\n                };\n                /**\n                 * TODO Wait for\n                 *   - https://github.com/github/fetch/issues/185\n                 *   - https://github.com/bitinn/node-fetch/issues/34\n                 * @param {Response} response\n                 * @return {Response}\n                 */\n                Client.cloneResponse = function (response) {\n                    if (sdk.core.utils.isFunction(response.clone))\n                        return response.clone();\n                    var body = '';\n                    if (response.hasOwnProperty('_bodyInit'))\n                        body = response['_bodyInit'];\n                    if (response.hasOwnProperty('_bodyText'))\n                        body = response['_bodyText'];\n                    if (response.hasOwnProperty('_bodyBlob'))\n                        body = response['_bodyBlob'].slice();\n                    if (response.hasOwnProperty('_bodyFormData'))\n                        body = response['_bodyFormData'];\n                    if (response.hasOwnProperty('_raw'))\n                        body = response['_raw'].join('');\n                    var clone = new sdk.externals._Response(body, response);\n                    if (response.hasOwnProperty('body'))\n                        clone['body'] = response['body']; // accessing non-standard properties\n                    return clone;\n                };\n                /**\n                 * Creates a response\n                 * @param stringBody\n                 * @param init\n                 * @return {Response}\n                 */\n                Client.createResponse = function (stringBody, init) {\n                    init = init || {};\n                    return new sdk.externals._Response(stringBody, init);\n                };\n                Client.createRequest = function (input, init) {\n                    init = init || {};\n                    var body = init.body;\n                    // Assign request with empty body, Github's fetch throws errors if it cannot recognize the body type\n                    var req = new sdk.externals._Request(input, sdk.core.utils.extend({}, init, { body: null }));\n                    if (!req.url)\n                        throw new Error('Url is not defined');\n                    if (!req.method)\n                        req.method = 'GET';\n                    if (req.method && allowedMethods.indexOf(req.method) < 0)\n                        throw new Error('Method has wrong value: ' + req.method);\n                    if (!req.headers.has('Accept'))\n                        req.headers.set('Accept', 'application/json');\n                    // Serialize body\n                    if (sdk.core.utils.isPlainObject(init.body) || !init.body) {\n                        if (!req.headers.has('Content-Type'))\n                            req.headers.set('Content-Type', 'application/json');\n                        var contentType = req.headers.get('Content-Type');\n                        if (contentType.indexOf('application/json') > -1) {\n                            body = JSON.stringify(init.body);\n                        }\n                        else if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n                            body = sdk.core.utils.queryStringify(init.body);\n                        }\n                    }\n                    req.credentials = 'include';\n                    req.mode = 'cors';\n                    if (init.query) {\n                        req.url = req.url + (req.url.indexOf('?') > -1 ? '&' : '?') + sdk.core.utils.queryStringify(init.query);\n                    }\n                    // Create another request with encoded body\n                    req = new sdk.externals._Request(req.url, sdk.core.utils.extend(req, { body: body }));\n                    // Keep the original body accessible directly (for mocks)\n                    req.body = init.body;\n                    return req;\n                };\n                return Client;\n            })(sdk.core.Observable);\n            http.Client = Client;\n        })(http = sdk.http || (sdk.http = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var platform;\n        (function (platform) {\n            var Queue = (function () {\n                function Queue(cache, cacheId) {\n                    this._cache = cache;\n                    this._cacheId = cacheId;\n                    this.setPollInterval(250);\n                    this.setReleaseTimeout(5000); // If queue was not released then force it to do so after some timeout\n                }\n                Queue.prototype.isPaused = function () {\n                    var storage = this._cache, cacheId = this._cacheId, time = storage.getItem(cacheId);\n                    return !!time && Date.now() - parseInt(time) < this._releaseTimeout;\n                };\n                Queue.prototype.pause = function () {\n                    this._cache.setItem(this._cacheId, Date.now());\n                    return this;\n                };\n                Queue.prototype.resume = function () {\n                    this._cache.removeItem(this._cacheId);\n                    return this;\n                };\n                Queue.prototype.poll = function () {\n                    var _this = this;\n                    if (this._promise)\n                        return this._promise;\n                    this._promise = new sdk.externals._Promise(function (resolve, reject) {\n                        sdk.core.utils.poll(function (next) {\n                            if (_this.isPaused())\n                                return next();\n                            _this._promise = null;\n                            _this.resume(); // this is actually not needed but why not\n                            resolve(null);\n                        }, _this._pollInterval);\n                    });\n                    return this._promise;\n                };\n                Queue.prototype.releaseTimeout = function () {\n                    return this._releaseTimeout;\n                };\n                Queue.prototype.pollInterval = function () {\n                    return this._pollInterval;\n                };\n                Queue.prototype.setReleaseTimeout = function (releaseTimeout) {\n                    this._releaseTimeout = releaseTimeout;\n                    return this;\n                };\n                Queue.prototype.setPollInterval = function (pollInterval) {\n                    this._pollInterval = pollInterval;\n                    return this;\n                };\n                return Queue;\n            })();\n            platform.Queue = Queue;\n        })(platform = sdk.platform || (sdk.platform = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../core/Cache.ts\" />\n/// <reference path=\"../core/Log\" />\n/// <reference path=\"../http/Client.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./Queue.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var platform;\n        (function (platform) {\n            var Platform = (function (_super) {\n                __extends(Platform, _super);\n                function Platform(client, cache, queue, server, appKey, appSecret) {\n                    _super.call(this);\n                    this._refreshDelayMs = 100;\n                    this._clearCacheOnRefreshError = true;\n                    this._cacheId = 'platform';\n                    this.events = {\n                        accessViolation: 'accessViolation',\n                        logoutSuccess: 'logoutSuccess',\n                        logoutError: 'logoutError',\n                        authorizeSuccess: 'authorizeSuccess',\n                        authorizeError: 'authorizeError',\n                        refreshSuccess: 'refreshSuccess',\n                        refreshError: 'refreshError'\n                    };\n                    this._server = server;\n                    this._appKey = appKey;\n                    this._appSecret = appSecret;\n                    this._cache = cache;\n                    this._client = client;\n                    this._queue = new platform.Queue(this._cache, this._cacheId + '-refresh');\n                    this._auth = new platform.Auth(this._cache, this._cacheId);\n                }\n                Platform.prototype.auth = function () {\n                    return this._auth;\n                };\n                Platform.prototype.createUrl = function (path, options) {\n                    path = path || '';\n                    options = options || {};\n                    var builtUrl = '', hasHttp = path.indexOf('http://') != -1 || path.indexOf('https://') != -1;\n                    if (options.addServer && !hasHttp)\n                        builtUrl += this._server;\n                    if (path.indexOf(Platform._urlPrefix) == -1 && !hasHttp)\n                        builtUrl += Platform._urlPrefix + '/' + Platform._apiVersion;\n                    builtUrl += path;\n                    if (options.addMethod || options.addToken)\n                        builtUrl += (path.indexOf('?') > -1 ? '&' : '?');\n                    if (options.addMethod)\n                        builtUrl += '_method=' + options.addMethod;\n                    if (options.addToken)\n                        builtUrl += (options.addMethod ? '&' : '') + 'access_token=' + this._auth.accessToken();\n                    return builtUrl;\n                };\n                Platform.prototype.authUrl = function (options) {\n                    options = options || {};\n                    return this.createUrl(Platform._authorizeEndpoint + '?' + sdk.core.utils.queryStringify({\n                        'response_type': 'code',\n                        'redirect_uri': options.redirectUri || '',\n                        'client_id': this._appKey,\n                        'state': options.state || '',\n                        'brand_id': options.brandId || '',\n                        'display': options.display || '',\n                        'prompt': options.prompt || ''\n                    }), { addServer: true });\n                };\n                Platform.prototype.parseAuthRedirectUrl = function (url) {\n                    var qs = sdk.core.utils.parseQueryString(url.split('?').reverse()[0]), error = qs.error_description || qs.error;\n                    if (error) {\n                        var e = new Error(error);\n                        e.error = qs.error;\n                        throw e;\n                    }\n                    return qs;\n                };\n                Platform.prototype.loggedIn = function () {\n                    return this._ensureAuthentication()\n                        .then(function () {\n                        return true;\n                    })\n                        .catch(function () {\n                        return false;\n                    });\n                };\n                Platform.prototype.login = function (options) {\n                    var _this = this;\n                    options = options || {};\n                    options.remember = options.remember || false;\n                    var body = {\n                        \"access_token_ttl\": Platform._accessTokenTtl,\n                        \"refresh_token_ttl\": options.remember ? Platform._refreshTokenTtlRemember : Platform._refreshTokenTtl\n                    };\n                    if (!options.code) {\n                        body.grant_type = 'password';\n                        body.username = options.username;\n                        body.password = options.password;\n                        body.extension = options.extension || '';\n                    }\n                    else if (options.code) {\n                        body.grant_type = 'authorization_code';\n                        body.code = options.code;\n                        body.redirect_uri = options.redirectUri;\n                    }\n                    if (options.endpointId)\n                        body.endpoint_id = options.endpointId;\n                    return this._tokenRequest(Platform._tokenEndpoint, body).then(function (res) {\n                        _this._auth\n                            .setData(res.json())\n                            .setRemember(options.remember);\n                        _this.emit(_this.events.authorizeSuccess, res);\n                        return res;\n                    }).catch(function (e) {\n                        _this._cache.clean();\n                        _this.emit(_this.events.authorizeError, e);\n                        throw e;\n                    });\n                };\n                Platform.prototype.refresh = function () {\n                    var _this = this;\n                    var refresh = new sdk.externals._Promise(function (resolve, reject) {\n                        if (_this._queue.isPaused()) {\n                            return resolve(_this._refreshPolling());\n                        }\n                        _this._queue.pause();\n                        // Make sure all existing AJAX calls had a chance to reach the server\n                        setTimeout(function () {\n                            sdk.core.log.debug('Platform.refresh(): Performing token refresh (access token', _this._auth.accessToken(), ', refresh token', _this._auth.refreshToken(), ')');\n                            // Perform sanity checks\n                            if (!_this._auth.refreshToken())\n                                return reject(new Error('Refresh token is missing'));\n                            if (!_this._auth.refreshTokenValid())\n                                return reject(new Error('Refresh token has expired'));\n                            if (!_this._queue.isPaused())\n                                return reject(new Error('Queue was resumed before refresh call'));\n                            resolve(_this._tokenRequest(Platform._tokenEndpoint, {\n                                \"grant_type\": \"refresh_token\",\n                                \"refresh_token\": _this._auth.refreshToken(),\n                                \"access_token_ttl\": Platform._accessTokenTtl,\n                                \"refresh_token_ttl\": _this._auth.remember() ? Platform._refreshTokenTtlRemember : Platform._refreshTokenTtl\n                            }));\n                        }, _this._refreshDelayMs);\n                    });\n                    return refresh.then(function (res) {\n                        // This means refresh has happened elsewhere and we are here because of timeout\n                        if (res && res.json && res.json()) {\n                            var json = res.json();\n                            sdk.core.log.info('Platform.refresh(): Token was refreshed', res);\n                            if (!json.refresh_token || !json.access_token) {\n                                throw sdk.http.Client.makeError(new Error('Malformed OAuth response'), res);\n                            }\n                            _this._auth.setData(json);\n                            _this._queue.resume();\n                        }\n                        _this.emit(_this.events.refreshSuccess, res);\n                        return res;\n                    }).catch(function (e) {\n                        e = sdk.http.Client.makeError(e);\n                        if (_this._clearCacheOnRefreshError) {\n                            _this._cache.clean();\n                        }\n                        _this.emit(_this.events.accessViolation, e);\n                        _this.emit(_this.events.refreshError, e);\n                        throw e;\n                    });\n                };\n                /**\n                 * @returns {Promise}\n                 */\n                Platform.prototype.logout = function () {\n                    var _this = this;\n                    this._queue.pause();\n                    return this._tokenRequest(Platform._revokeEndpoint, {\n                        token: this._auth.accessToken()\n                    }).then(function (res) {\n                        _this._queue.resume();\n                        _this._cache.clean();\n                        _this.emit(_this.events.logoutSuccess, res);\n                        return res;\n                    }).catch(function (e) {\n                        _this._queue.resume();\n                        _this.emit(_this.events.accessViolation, e);\n                        _this.emit(_this.events.logoutError, e);\n                        throw e;\n                    });\n                };\n                Platform.prototype.inflateRequest = function (request, options) {\n                    var _this = this;\n                    options = options || {};\n                    if (options.skipAuthCheck)\n                        return sdk.externals._Promise.resolve(request);\n                    return this\n                        ._ensureAuthentication()\n                        .then(function () {\n                        request.headers.set('Authorization', _this._authHeader());\n                        request.url = _this.createUrl(request.url, { addServer: true });\n                        return request;\n                    });\n                };\n                Platform.prototype.sendRequest = function (request, options) {\n                    var _this = this;\n                    return this\n                        .inflateRequest(request, options)\n                        .then(function (req) {\n                        return _this._client.sendRequest(req);\n                    })\n                        .catch(function (e) {\n                        // Guard is for errors that come from polling\n                        if (!e.apiResponse || !e.apiResponse.response() || (e.apiResponse.response().status != 401))\n                            throw e;\n                        _this._auth.cancelAccessToken();\n                        return _this.sendRequest(request, options);\n                    });\n                };\n                /**\n                 * General purpose function to send anything to server\n                 */\n                Platform.prototype.send = function (url, options) {\n                    try {\n                        // This has to be done here in order to let NodeJS Fetch to create Request\n                        url = this.createUrl(url, { addServer: true });\n                        return this.sendRequest(sdk.http.Client.createRequest(url, options), options);\n                    }\n                    catch (e) {\n                        return sdk.externals._Promise.reject(e);\n                    }\n                };\n                Platform.prototype.get = function (url, options) {\n                    options = options || {};\n                    options.method = 'GET';\n                    return this.send(url, options);\n                };\n                Platform.prototype.post = function (url, options) {\n                    options = options || {};\n                    options.method = 'POST';\n                    return this.send(url, options);\n                };\n                Platform.prototype.put = function (url, options) {\n                    options = options || {};\n                    options.method = 'PUT';\n                    return this.send(url, options);\n                };\n                Platform.prototype['delete'] = function (url, options) {\n                    options = options || {};\n                    options.method = 'DELETE';\n                    return this.send(url, options);\n                };\n                Platform.prototype._tokenRequest = function (path, body) {\n                    return this.send(path, {\n                        skipAuthCheck: true,\n                        body: body,\n                        method: 'POST',\n                        headers: {\n                            'Authorization': 'Basic ' + this._apiKey(),\n                            'Content-Type': 'application/x-www-form-urlencoded'\n                        }\n                    });\n                };\n                Platform.prototype._ensureAuthentication = function () {\n                    if (this._isAccessTokenValid())\n                        return sdk.externals._Promise.resolve(null);\n                    return this.refresh();\n                };\n                Platform.prototype._isAccessTokenValid = function () {\n                    return (this._auth.accessTokenValid() && !this._queue.isPaused());\n                };\n                Platform.prototype._refreshPolling = function () {\n                    var _this = this;\n                    sdk.core.log.warn('Platform.refresh(): Refresh is already in progress, polling started');\n                    return this._queue.poll().then(function () {\n                        if (!_this._isAccessTokenValid()) {\n                            throw new Error('Automatic authentification timeout');\n                        }\n                        return null;\n                    });\n                };\n                Platform.prototype._apiKey = function () {\n                    var apiKey = this._appKey + ':' + this._appSecret;\n                    return (typeof btoa == 'function') ? btoa(apiKey) : new Buffer(apiKey).toString('base64');\n                };\n                Platform.prototype._authHeader = function () {\n                    var token = this._auth.accessToken();\n                    return this._auth.tokenType() + (token ? ' ' + token : '');\n                };\n                Platform._urlPrefix = '/restapi';\n                Platform._apiVersion = 'v1.0';\n                Platform._accessTokenTtl = null; // Platform server by default sets it to 60 * 60 = 1 hour\n                Platform._refreshTokenTtl = 10 * 60 * 60; // 10 hours\n                Platform._refreshTokenTtlRemember = 7 * 24 * 60 * 60; // 1 week\n                Platform._tokenEndpoint = '/restapi/oauth/token';\n                Platform._revokeEndpoint = '/restapi/oauth/revoke';\n                Platform._authorizeEndpoint = '/restapi/oauth/authorize';\n                return Platform;\n            })(sdk.core.Observable);\n            platform.Platform = Platform;\n        })(platform = sdk.platform || (sdk.platform = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Log.ts\" />\n/// <reference path=\"../platform/Platform.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var subscription;\n        (function (subscription_1) {\n            var Subscription = (function (_super) {\n                __extends(Subscription, _super);\n                function Subscription(pubnubFactory, platform) {\n                    _super.call(this);\n                    this._renewHandicapMs = 2 * 60 * 1000;\n                    this.events = {\n                        notification: 'notification',\n                        removeSuccess: 'removeSuccess',\n                        removeError: 'removeError',\n                        renewSuccess: 'renewSuccess',\n                        renewError: 'renewError',\n                        subscribeSuccess: 'subscribeSuccess',\n                        subscribeError: 'subscribeError'\n                    };\n                    this._pubnubFactory = pubnubFactory;\n                    this._platform = platform;\n                    this._pubnub = null;\n                    this._eventFilters = [];\n                    this._timeout = null;\n                    this._subscription = null;\n                }\n                Subscription.prototype.alive = function () {\n                    return this._subscription &&\n                        this._subscription.id &&\n                        this._subscription.deliveryMode &&\n                        this._subscription.deliveryMode.subscriberKey &&\n                        this._subscription.deliveryMode.address;\n                };\n                Subscription.prototype.setSubscription = function (subscription) {\n                    this._clearTimeout();\n                    this._subscription = subscription;\n                    if (!this._pubnub)\n                        this._subscribeAtPubnub();\n                    this._setTimeout();\n                    return this;\n                };\n                Subscription.prototype.subscription = function () {\n                    return this._subscription;\n                };\n                /**\n                 * Creates or updates subscription if there is an active one\n                 * @param {{events?:string[]}} [options] New array of events\n                 * @returns {Promise}\n                 */\n                Subscription.prototype.register = function (options) {\n                    if (this.alive()) {\n                        return this.renew(options);\n                    }\n                    else {\n                        return this.subscribe(options);\n                    }\n                };\n                Subscription.prototype.addEvents = function (events) {\n                    this._eventFilters = this._eventFilters.concat(events);\n                    return this;\n                };\n                Subscription.prototype.setEvents = function (events) {\n                    this._eventFilters = events;\n                    return this;\n                };\n                Subscription.prototype.subscribe = function (options) {\n                    var _this = this;\n                    options = options || {};\n                    if (options.events)\n                        this.setEvents(options.events);\n                    this._clearTimeout();\n                    return new sdk.externals._Promise(function (resolve, reject) {\n                        if (!_this._eventFilters || !_this._eventFilters.length)\n                            throw new Error('Events are undefined');\n                        resolve(_this._platform.post('/restapi/v1.0/subscription', {\n                            body: {\n                                eventFilters: _this._getFullEventFilters(),\n                                deliveryMode: {\n                                    transportType: 'PubNub'\n                                }\n                            }\n                        }));\n                    }).then(function (ajax) {\n                        _this.setSubscription(ajax.json())\n                            .emit(_this.events.subscribeSuccess, ajax);\n                        return ajax;\n                    }).catch(function (e) {\n                        e = sdk.http.Client.makeError(e);\n                        _this.reset()\n                            .emit(_this.events.subscribeError, e);\n                        throw e;\n                    });\n                };\n                Subscription.prototype.renew = function (options) {\n                    var _this = this;\n                    options = options || {};\n                    if (options.events)\n                        this.setEvents(options.events);\n                    this._clearTimeout();\n                    return new sdk.externals._Promise(function (resolve, reject) {\n                        if (!_this.alive())\n                            throw new Error('Subscription is not alive');\n                        if (!_this._eventFilters || !_this._eventFilters.length)\n                            throw new Error('Events are undefined');\n                        return _this._platform.put('/restapi/v1.0/subscription/' + _this._subscription.id, {\n                            body: {\n                                eventFilters: _this._getFullEventFilters()\n                            }\n                        });\n                    })\n                        .then(function (ajax) {\n                        _this.setSubscription(ajax.json())\n                            .emit(_this.events.renewSuccess, ajax.json());\n                        return ajax;\n                    })\n                        .catch(function (e) {\n                        e = sdk.http.Client.makeError(e);\n                        _this.reset()\n                            .emit(_this.events.renewError, e);\n                        throw e;\n                    });\n                };\n                Subscription.prototype.remove = function () {\n                    var _this = this;\n                    return new sdk.externals._Promise(function (resolve, reject) {\n                        if (!_this._subscription || !_this._subscription.id)\n                            throw new Error('Subscription ID is required');\n                        resolve(_this._platform.delete('/restapi/v1.0/subscription/' + _this._subscription.id));\n                    }).then(function (ajax) {\n                        _this.reset()\n                            .emit(_this.events.removeSuccess, ajax);\n                        return ajax;\n                    }).catch(function (e) {\n                        e = sdk.http.Client.makeError(e);\n                        _this.emit(_this.events.removeError, e);\n                        throw e;\n                    });\n                };\n                /**\n                 * Remove subscription and disconnect from PUBNUB\n                 * This method resets subscription at client side but backend is not notified\n                 */\n                Subscription.prototype.reset = function () {\n                    this._clearTimeout();\n                    if (this.alive() && this._pubnub)\n                        this._pubnub.unsubscribe({ channel: this._subscription.deliveryMode.address });\n                    this._subscription = null;\n                    return this;\n                };\n                Subscription.prototype.destroy = function () {\n                    this.reset();\n                    sdk.core.log.info('RC.subscription.Subscription: Destroyed');\n                    return _super.prototype.destroy.call(this);\n                };\n                Subscription.prototype._getFullEventFilters = function () {\n                    var _this = this;\n                    return this._eventFilters.map(function (event) {\n                        return _this._platform.createUrl(event);\n                    });\n                };\n                Subscription.prototype._setTimeout = function () {\n                    var _this = this;\n                    this._clearTimeout();\n                    if (!this.alive())\n                        throw new Error('Subscription is not alive');\n                    var timeToExpiration = (this._subscription.expiresIn * 1000) - this._renewHandicapMs;\n                    this._timeout = setTimeout(function () {\n                        _this.renew({});\n                    }, timeToExpiration);\n                    return this;\n                };\n                Subscription.prototype._clearTimeout = function () {\n                    clearTimeout(this._timeout);\n                    return this;\n                };\n                Subscription.prototype._decrypt = function (message) {\n                    if (!this.alive())\n                        throw new Error('Subscription is not alive');\n                    if (this._subscription.deliveryMode.encryptionKey) {\n                        var PUBNUB = this._pubnubFactory.getPubnub();\n                        message = PUBNUB.crypto_obj.decrypt(message, this._subscription.deliveryMode.encryptionKey, {\n                            encryptKey: false,\n                            keyEncoding: 'base64',\n                            keyLength: 128,\n                            mode: 'ecb'\n                        });\n                    }\n                    return message;\n                };\n                Subscription.prototype._notify = function (message) {\n                    this.emit(this.events.notification, this._decrypt(message));\n                    return this;\n                };\n                Subscription.prototype._subscribeAtPubnub = function () {\n                    var _this = this;\n                    if (!this.alive())\n                        throw new Error('Subscription is not alive');\n                    var PUBNUB = this._pubnubFactory.getPubnub();\n                    this._pubnub = PUBNUB.init({\n                        ssl: true,\n                        subscribe_key: this._subscription.deliveryMode.subscriberKey\n                    });\n                    this._pubnub.ready();\n                    this._pubnub.subscribe({\n                        channel: this._subscription.deliveryMode.address,\n                        message: function (message, env, channel) {\n                            sdk.core.log.info('RC.core.Subscription: Incoming message', message);\n                            _this._notify(message);\n                        },\n                        connect: function () {\n                            sdk.core.log.info('RC.core.Subscription: PUBNUB connected');\n                        }\n                    });\n                    return this;\n                };\n                return Subscription;\n            })(sdk.core.Observable);\n            subscription_1.Subscription = Subscription;\n        })(subscription = sdk.subscription || (sdk.subscription = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var pubnub;\n        (function (pubnub) {\n            var PubnubMock = (function (_super) {\n                __extends(PubnubMock, _super);\n                function PubnubMock(options) {\n                    _super.call(this);\n                    this.options = options;\n                    this.crypto_obj = sdk.externals._PUBNUB.crypto_obj;\n                }\n                PubnubMock.prototype.ready = function () { };\n                PubnubMock.prototype.subscribe = function (options) {\n                    this.on('message-' + options.channel, options.message);\n                };\n                PubnubMock.prototype.unsubscribe = function (options) {\n                    this.off('message-' + options.channel);\n                };\n                PubnubMock.prototype.receiveMessage = function (msg, channel) {\n                    this.emit('message-' + channel, msg, 'env', channel);\n                };\n                return PubnubMock;\n            })(sdk.core.Observable);\n            pubnub.PubnubMock = PubnubMock;\n            var PubnubMockFactory = (function () {\n                function PubnubMockFactory() {\n                    this.crypto_obj = sdk.externals._PUBNUB.crypto_obj;\n                }\n                PubnubMockFactory.prototype.init = function (options) {\n                    return new PubnubMock(options);\n                };\n                return PubnubMockFactory;\n            })();\n            pubnub.PubnubMockFactory = PubnubMockFactory;\n        })(pubnub = sdk.pubnub || (sdk.pubnub = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../pubnub/PubnubMock.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var pubnub;\n        (function (pubnub) {\n            var PubnubFactory = (function () {\n                function PubnubFactory(flag) {\n                    this._useMock = false;\n                    this._useMock = !!flag;\n                    this._mock = new pubnub.PubnubMockFactory();\n                }\n                PubnubFactory.prototype.getPubnub = function () {\n                    return this._useMock ? this._mock : sdk.externals._PUBNUB;\n                };\n                return PubnubFactory;\n            })();\n            pubnub.PubnubFactory = PubnubFactory;\n        })(pubnub = sdk.pubnub || (sdk.pubnub = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"./externals.d.ts\" />\n/// <reference path=\"./core/Cache.ts\" />\n/// <reference path=\"./core/Log.ts\" />\n/// <reference path=\"./core/Observable.ts\" />\n/// <reference path=\"./core/PageVisibility.ts\" />\n/// <reference path=\"./core/Utils.ts\" />\n/// <reference path=\"./http/Client.ts\" />\n/// <reference path=\"./platform/Platform.ts\" />\n/// <reference path=\"./platform/Queue.ts\" />\n/// <reference path=\"./subscription/Subscription.ts\" />\n/// <reference path=\"./pubnub/PubnubFactory.ts\" />\n/// <reference path=\"./externals/Externals.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var SDK = (function () {\n            function SDK(options) {\n                options = options || {};\n                sdk.externals.get();\n                this._mockRegistry = new sdk.mocks.Registry();\n                this._cache = new sdk.core.Cache(typeof localStorage !== 'undefined' ? localStorage : {}, options.cachePrefix);\n                this._queue = new sdk.platform.Queue(this._cache, 'platform-refresh');\n                this._client = options.useHttpMock ? new sdk.http.ClientMock(this._mockRegistry) : new sdk.http.Client();\n                this._platform = new sdk.platform.Platform(this._client, this._cache, this._queue, options.server, options.appKey, options.appSecret);\n                this._pubnubFactory = new sdk.pubnub.PubnubFactory(options.usePubnubMock);\n                //TODO Link Platform events with Subscriptions and the rest\n            }\n            SDK.prototype.platform = function () {\n                return this._platform;\n            };\n            SDK.prototype.cache = function () {\n                return this._cache;\n            };\n            SDK.prototype.createSubscription = function () {\n                return new sdk.subscription.Subscription(this._pubnubFactory, this._platform);\n            };\n            SDK.prototype.createPageVisibility = function () {\n                return new sdk.core.PageVisibility();\n            };\n            SDK.prototype.createObservable = function () {\n                return new sdk.core.Observable();\n            };\n            SDK.prototype.log = function () {\n                return sdk.core.log;\n            };\n            SDK.prototype.utils = function () {\n                return sdk.core.utils;\n            };\n            SDK.prototype.mockRegistry = function () { return this._mockRegistry; };\n            SDK.version = '2.0.0';\n            SDK.server = {\n                sandbox: 'https://platform.devtest.ringcentral.com',\n                production: 'https://platform.ringcentral.com'\n            };\n            return SDK;\n        })();\n        sdk.SDK = SDK;\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\nvar e = RingCentral.sdk.externals.get();\nif (typeof define === 'function' && define.amd) {\n    define(['pubnub'], function (PUBNUB) {\n        e._PUBNUB = PUBNUB;\n        return RingCentral.sdk;\n    });\n}\nelse if (typeof module === 'object' && module.exports) {\n    e._PUBNUB = require('pubnub');\n    e._Promise = typeof (Promise) !== 'undefined' ? Promise : require('es6-promise').Promise;\n    e._fetch = require('node-fetch');\n    e._Request = e._fetch['Request'];\n    e._Response = e._fetch['Response'];\n    e._Headers = e._fetch['Headers'];\n    module.exports = RingCentral.sdk;\n}\nelse {\n}\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../mocks/Registry.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./ApiResponse.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var http;\n        (function (http) {\n            var ClientMock = (function (_super) {\n                __extends(ClientMock, _super);\n                function ClientMock(registry) {\n                    _super.call(this);\n                    this._registry = registry;\n                }\n                ClientMock.prototype._loadResponse = function (request) {\n                    var _this = this;\n                    return new sdk.externals._Promise(function (resolve) {\n                        sdk.core.log.debug('API REQUEST', request.method, request.url);\n                        var mock = _this._registry.find(request);\n                        resolve(mock.getResponse(request));\n                    });\n                };\n                return ClientMock;\n            })(http.Client);\n            http.ClientMock = ClientMock;\n        })(http = sdk.http || (sdk.http = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../core/Cache.ts\" />\n/// <reference path=\"../core/Log\" />\n/// <reference path=\"../http/Client.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./Queue.ts\" />\nvar RingCentral;\n(function (RingCentral) {\n    var sdk;\n    (function (sdk) {\n        var platform;\n        (function (platform) {\n            var Auth = (function () {\n                function Auth(cache, cacheId) {\n                    this._cache = cache;\n                    this._cacheId = cacheId;\n                }\n                Auth.prototype.accessToken = function () {\n                    return this.data().access_token;\n                };\n                Auth.prototype.refreshToken = function () {\n                    return this.data().refresh_token;\n                };\n                Auth.prototype.tokenType = function () {\n                    return this.data().token_type;\n                };\n                Auth.prototype.data = function () {\n                    return this._cache.getItem(this._cacheId) || {\n                        token_type: '',\n                        access_token: '',\n                        expires_in: 0,\n                        refresh_token: '',\n                        refresh_token_expires_in: 0\n                    };\n                };\n                Auth.prototype.setData = function (authData) {\n                    var oldAuthData = this.data();\n                    authData = sdk.core.utils.extend({}, oldAuthData, authData);\n                    authData.expire_time = Date.now() + (authData.expires_in * 1000);\n                    authData.refresh_token_expire_time = Date.now() + (authData.refresh_token_expires_in * 1000);\n                    sdk.core.log.info('Auth.setData(): Tokens were updated, new:', authData, ', old:', oldAuthData);\n                    this._cache.setItem(this._cacheId, authData);\n                    return this;\n                };\n                /**\n                 * Check if there is a valid (not expired) access token\n                 */\n                Auth.prototype.accessTokenValid = function () {\n                    var authData = this.data();\n                    return (authData.token_type === Auth.forcedTokenType || (authData.expire_time - Auth.refreshHandicapMs > Date.now()));\n                };\n                /**\n                 * Check if there is a valid (not expired) access token\n                 */\n                Auth.prototype.refreshTokenValid = function () {\n                    return (this.data().refresh_token_expire_time > Date.now());\n                };\n                Auth.prototype.cancelAccessToken = function () {\n                    return this.setData({\n                        access_token: '',\n                        expires_in: 0\n                    });\n                };\n                /**\n                 * This method sets a special authentication mode used in Service Web\n                 * @return {Platform}\n                 */\n                Auth.prototype.forceAuthentication = function () {\n                    this.setData({\n                        token_type: Auth.forcedTokenType,\n                        access_token: '',\n                        expires_in: 0,\n                        refresh_token: '',\n                        refresh_token_expires_in: 0\n                    });\n                    return this;\n                };\n                Auth.prototype.setRemember = function (remember) {\n                    return this.setData({ remember: remember });\n                };\n                Auth.prototype.remember = function () {\n                    return !!this.data().remember;\n                };\n                Auth.refreshHandicapMs = 60 * 1000; // 1 minute\n                Auth.forcedTokenType = 'forced';\n                return Auth;\n            })();\n            platform.Auth = Auth;\n        })(platform = sdk.platform || (sdk.platform = {}));\n    })(sdk = RingCentral.sdk || (RingCentral.sdk = {}));\n})(RingCentral || (RingCentral = {}));\n\n//# sourceMappingURL=ringcentral.js.map","module RingCentral.sdk.core.utils {\n\n    var hasOwn = Object.prototype.hasOwnProperty,\n        toString = Object.prototype.toString,\n        rdigit = /\\d/,\n        class2type = {};\n\n    // Populate the class2type map\n    'Boolean Number String Function Array Date RegExp Object'.split(' ').forEach((name) => {\n        class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n    });\n\n    /**\n     * Ported from jQuery.fn.extend\n     * Optional first parameter makes deep copy\n     */\n    export function extend(targetObject:any, sourceObject:any, ...args) {\n\n        var options, name, src, copy, copyIsArray, clone,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length,\n            deep = false;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && !isFunction(target)) {\n            target = {};\n        }\n\n        for (; i < length; i++) {\n\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) !== null) {\n\n                // Extend the base object\n                for (name in options) {\n\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = extend(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n\n                        target[name] = copy;\n\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n\n    }\n\n    export function forEach(object, cb) {\n\n        for (var i in object) {\n\n            if (!object.hasOwnProperty(i)) continue;\n\n            var res = cb(object[i], i);\n\n            if (res === false) break;\n\n        }\n\n    }\n\n    /**\n     * TODO Replace with something better\n     * @see https://github.com/joyent/node/blob/master/lib/querystring.js\n     * @param {object} parameters\n     * @returns {string}\n     */\n    export function queryStringify(parameters) {\n\n        var array = [];\n\n        forEach(parameters, (v, i) => {\n\n            if (isArray(v)) {\n                v.forEach((vv) => {\n                    array.push(encodeURIComponent(i) + '=' + encodeURIComponent(vv));\n                });\n            } else {\n                array.push(encodeURIComponent(i) + '=' + encodeURIComponent(v));\n            }\n\n        });\n\n        return array.join('&');\n\n    }\n\n    /**\n     * TODO Replace with something better\n     * @see https://github.com/joyent/node/blob/master/lib/querystring.js\n     * @param {string} queryString\n     * @returns {object}\n     */\n    export function parseQueryString(queryString:string):any {\n\n        var argsParsed = {},\n            self = this;\n\n        queryString.split('&').forEach((arg) => {\n\n            arg = decodeURIComponent(arg);\n\n            if (arg.indexOf('=') == -1) {\n\n                argsParsed[arg.trim()] = true;\n\n            } else {\n\n                var pair = arg.split('='),\n                    key = pair[0].trim(),\n                    value = pair[1].trim();\n\n                if (key in argsParsed) {\n                    if (key in argsParsed && !self.isArray(argsParsed[key])) argsParsed[key] = [argsParsed[key]];\n                    argsParsed[key].push(value);\n                } else {\n                    argsParsed[key] = value;\n                }\n\n            }\n\n        });\n\n        return argsParsed;\n\n    }\n\n    /**\n     * Returns true if the passed value is valid email address.\n     * Checks multiple comma separated emails according to RFC 2822 if parameter `multiple` is `true`\n     */\n    export function isEmail(v:string, multiple:boolean):boolean {\n        if (!!multiple) {\n            //this Regexp is also suitable for multiple emails (comma separated)\n            return /^(?:[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?[ ,;]*)+$/i.test(v);\n        } else {\n            return /^[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(v);\n        }\n\n    }\n\n    export function isPhoneNumber(v:string):boolean {\n        return (/\\+?1[0-9]{3}[0-9a-z]{7}/im.test(v.toString().split(/[^0-9a-z\\+]/im).join('')));\n    }\n\n    /**\n     * @param args\n     * @returns {Array}\n     */\n    export function argumentsToArray(args:any) {\n        return Array.prototype.slice.call(args || [], 0);\n    }\n\n    export function isDate(obj:any):boolean {\n        return type(obj) === \"date\";\n    }\n\n    export function isFunction(obj:any):boolean {\n        return type(obj) === \"function\";\n    }\n\n    export function isArray(obj:any):boolean {\n        return Array.isArray ? Array.isArray(obj) : type(obj) === \"array\";\n    }\n\n    // A crude way of determining if an object is a window\n    export function isWindow(obj:any):boolean {\n        return obj && typeof obj === \"object\" && \"setInterval\" in obj;\n    }\n\n    export function isNan(obj:any):boolean {\n        return obj === null || !rdigit.test(obj) || isNaN(obj);\n    }\n\n    export function type(obj:any):string {\n        return obj === null\n            ? String(obj)\n            : class2type[toString.call(obj)] || \"object\";\n    }\n\n    export function isPlainObject(obj:any):boolean {\n\n        // Must be an Object.\n        // Because of IE, we also have to check the presence of the constructor property.\n        // Make sure that DOM nodes and window objects don't pass through, as well\n        if (!obj || type(obj) !== \"object\" || obj.nodeType || isWindow(obj)) {\n            return false;\n        }\n\n        // Not own constructor property must be Object\n        if (obj.constructor && !hasOwn.call(obj, \"constructor\") && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n\n        // Own properties are enumerated firstly, so to speed up,\n        // if last one is own, then all properties are own.\n\n        var key;\n        for (key in obj) {}\n\n        return key === undefined || hasOwn.call(obj, key);\n\n    }\n\n    export function getProperty(obj:any, property:string):any {\n\n        return property\n            .split(/[.[\\]]/)\n            .reduce((res, part) => {\n                if (!res) return undefined;\n                return part ? res[part] : res;\n            }, obj);\n\n    }\n\n    export function poll(fn, interval?:number, timeout?:any):any { //NodeJS.Timer|number\n\n        stopPolling(timeout);\n\n        interval = interval || 1000;\n\n        var next = (delay?:number):any => {\n\n            delay = delay || interval;\n\n            interval = delay;\n\n            return setTimeout(() => {\n\n                fn(next, delay);\n\n            }, delay);\n\n        };\n\n        return next();\n\n    }\n\n    export function stopPolling(timeout) {\n        if (timeout) clearTimeout(timeout);\n    }\n\n    export function parseString(s:any):string {\n        return s ? s.toString() : '';\n    }\n\n    export function parseNumber(n:any):number {\n        if (!n) return 0;\n        n = parseFloat(n);\n        return isNan(n) ? 0 : n;\n    }\n\n    export function isNodeJS():boolean {\n        return (typeof process !== 'undefined');\n    }\n\n    export function isBrowser():boolean {\n        return (typeof window !== 'undefined');\n    }\n\n}","/// <reference path=\"./Log.ts\" />\n/// <reference path=\"./Utils.ts\" />\n\nmodule RingCentral.sdk.core {\n\n    /**\n     * @see https://github.com/Microsoft/TypeScript/issues/275\n     */\n    export class Observable<T extends Observable<any>> {\n\n        private _listeners:any;\n\n        constructor() {\n            if (!(this instanceof Observable)) throw new Error('Observable(): New operator was omitted');\n            this.off();\n        }\n\n        hasListeners(event) {\n            return (event in this._listeners);\n        }\n\n        on(events:any, callback:(...args)=>any):T {\n\n            if (typeof events == 'string') events = [events];\n            if (!events) throw new Error('No events to subscribe to');\n            if (typeof callback !== 'function') throw new Error('Callback must be a function');\n\n            events.forEach((event:string) => {\n\n                if (!this.hasListeners(event)) this._listeners[event] = [];\n\n                this._listeners[event].push(callback);\n\n            });\n\n            return <any>this;\n\n        }\n\n        emit(event:string, ...args):any {\n\n            var result = null;\n\n            if (!this.hasListeners(event)) return null;\n\n            this._listeners[event].some((callback:()=>any) => {\n\n                result = callback.apply(this, args);\n                return (result === false);\n\n            });\n\n            return result;\n\n        }\n\n        off(event?:string, callback?):T {\n\n            if (!event) {\n\n                this._listeners = {};\n\n            } else {\n\n                if (!callback) {\n\n                    delete this._listeners[event];\n\n                } else {\n\n                    if (!this.hasListeners(event)) return <any>this;\n\n                    this._listeners[event].forEach((cb, i) => {\n\n                        if (cb === callback) delete this._listeners[event][i];\n\n                    });\n\n                }\n\n            }\n\n            return <any>this;\n\n        }\n\n        destroy():T {\n            this.off();\n            log.debug('Observable.destroy(): Listeners were destroyed');\n            return <T>this;\n        }\n\n    }\n\n}\n\n\n","/// <reference path=\"./Observable.ts\" />\n\nmodule RingCentral.sdk.core {\n\n    export class PageVisibility extends Observable<PageVisibility> {\n\n        public events = {\n            change: 'change'\n        };\n\n        protected _visible:boolean;\n\n        constructor() {\n\n            super();\n\n            var hidden = \"hidden\",\n                onchange = (evt) => {\n\n                    evt = evt || window.event;\n\n                    var v = 'visible',\n                        h = 'hidden',\n                        evtMap = {\n                            focus: v, focusin: v, pageshow: v, blur: h, focusout: h, pagehide: h\n                        };\n\n                    this._visible = (evt.type in evtMap) ? evtMap[evt.type] == v : !document[hidden];\n\n                    this.emit(this.events.change, this._visible);\n\n                };\n\n            this._visible = true;\n\n            if (typeof document == 'undefined' || typeof window == 'undefined') return;\n\n            // Standards:\n\n            if (hidden in document)\n                document.addEventListener(\"visibilitychange\", onchange);\n            else if ((hidden = \"mozHidden\") in document)\n                document.addEventListener(\"mozvisibilitychange\", onchange);\n            else if ((hidden = \"webkitHidden\") in document)\n                document.addEventListener(\"webkitvisibilitychange\", onchange);\n            else if ((hidden = \"msHidden\") in document)\n                document.addEventListener(\"msvisibilitychange\", onchange);\n            // IE 9 and lower:\n            else if ('onfocusin' in <any>document)\n                (<any>document).onfocusin = (<any>document).onfocusout = onchange;\n            // All others:\n            else\n                window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;\n\n        }\n\n        visible() {\n            return this._visible;\n        }\n\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n\nmodule RingCentral.sdk.mocks {\n\n    export class Mock {\n\n        protected _method:string;\n        protected _path:string;\n        protected _delay:number;\n        protected _json:any;\n        protected _status:number;\n        protected _statusText:string;\n\n        constructor(method:string, path:string, json?:any, status?:number, statusText?:string, delay?:number) {\n            this._method = method.toUpperCase();\n            this._path = path;\n            this._json = json || {};\n            this._delay = delay || 10;\n            this._status = status || 200;\n            this._statusText = statusText || 'OK';\n        }\n\n        path() {\n            return this._path;\n        }\n\n        method() {\n            return this._method;\n        }\n\n        test(request:Request) {\n\n            return request.url.indexOf(this._path) > -1 &&\n                   request.method.toUpperCase() == this._method;\n\n        }\n\n        getResponse(request:Request):Response|Promise<Response> {\n\n            return new externals._Promise((resolve, reject) => {\n\n                setTimeout(() => {\n\n                    resolve(this.createResponse(this._json));\n\n                }, this._delay);\n\n            });\n\n        }\n\n        createResponse(json?:any, init?:ResponseInit|any) {\n\n            init = init || {};\n\n            init.status = init.status || this._status;\n            init.statusText = init.statusText || this._statusText;\n\n            var str = JSON.stringify(json),\n                res = http.Client.createResponse(str, init);\n\n            res.headers.set(http.ApiResponse.contentType, http.ApiResponse.jsonContentType);\n\n            return res;\n\n        }\n\n    }\n\n}","/// <reference path=\"./Mock.ts\" />\n\nmodule RingCentral.sdk.mocks {\n\n    export class Registry {\n\n        protected _mocks:Mock[];\n\n        constructor() {\n            this._mocks = [];\n        }\n\n        add(mock:Mock) {\n            this._mocks.push(mock);\n            return this;\n        }\n\n        clear() {\n            this._mocks = [];\n            return this;\n        }\n\n        find(request:Request):Mock {\n\n            //console.log('Registry is looking for', request);\n\n            var mock = this._mocks.shift();\n\n            if (!mock) throw new Error('No mock in registry for request ' + request.method + ' ' + request.url);\n\n            if (!mock.test(request)) throw new Error('Wrong request ' + request.method + ' ' + request.url +\n                                                     ' for expected mock ' + mock.method() + ' ' + mock.path());\n\n            return mock;\n\n        }\n\n        apiCall(method:string, path:string, response:any, status?:number, statusText?:string) {\n\n            this.add(new Mock(method, path, response, status, statusText));\n\n            return this;\n\n        }\n\n        authentication() {\n\n            this.apiCall('POST', '/restapi/oauth/token', {\n                'access_token': 'ACCESS_TOKEN',\n                'token_type': 'bearer',\n                'expires_in': 3600,\n                'refresh_token': 'REFRESH_TOKEN',\n                'refresh_token_expires_in': 60480,\n                'scope': 'SMS RCM Foo Boo',\n                'expireTime': new Date().getTime() + 3600000\n            });\n\n            return this;\n\n        }\n\n        logout() {\n\n            this.apiCall('POST', '/restapi/oauth/revoke', {});\n\n            return this;\n\n        }\n\n        presenceLoad(id) {\n\n            this.apiCall('GET', '/restapi/v1.0/account/~/extension/' + id + '/presence', {\n                \"uri\": \"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/\" + id + \"/presence\",\n                \"extension\": {\n                    \"uri\": \"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/\" + id,\n                    \"id\": id,\n                    \"extensionNumber\": \"101\"\n                },\n                \"activeCalls\": [],\n                \"presenceStatus\": \"Available\",\n                \"telephonyStatus\": \"Ringing\",\n                \"userStatus\": \"Available\",\n                \"dndStatus\": \"TakeAllCalls\",\n                \"extensionId\": id\n            });\n\n            return this;\n\n        }\n\n        subscribeGeneric(expiresIn?:number) {\n\n            expiresIn = expiresIn || 15 * 60 * 60;\n\n            var date = new Date();\n\n            this.apiCall('POST', '/restapi/v1.0/subscription', {\n                'eventFilters': [\n                    '/restapi/v1.0/account/~/extension/~/presence'\n                ],\n                'expirationTime': new Date(date.getTime() + (expiresIn * 1000)).toISOString(),\n                'expiresIn': expiresIn,\n                'deliveryMode': {\n                    'transportType': 'PubNub',\n                    'encryption': false,\n                    'address': '123_foo',\n                    'subscriberKey': 'sub-c-foo',\n                    'secretKey': 'sec-c-bar'\n                },\n                'id': 'foo-bar-baz',\n                'creationTime': date.toISOString(),\n                'status': 'Active',\n                'uri': 'https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz'\n            });\n\n            return this;\n\n        }\n\n        subscribeOnPresence(id?:string, detailed?:boolean) {\n\n            id = id || '1';\n\n            var date = new Date();\n\n            this.apiCall('POST', '/restapi/v1.0/subscription', {\n                'eventFilters': ['/restapi/v1.0/account/~/extension/' + id + '/presence' + (detailed ? '?detailedTelephonyState=true' : '')],\n                'expirationTime': new Date(date.getTime() + (15 * 60 * 60 * 1000)).toISOString(),\n                'deliveryMode': {\n                    'transportType': 'PubNub',\n                    'encryption': true,\n                    'address': '123_foo',\n                    'subscriberKey': 'sub-c-foo',\n                    'secretKey': 'sec-c-bar',\n                    'encryptionAlgorithm': 'AES',\n                    'encryptionKey': 'VQwb6EVNcQPBhE/JgFZ2zw=='\n                },\n                'creationTime': date.toISOString(),\n                'id': 'foo-bar-baz',\n                'status': 'Active',\n                'uri': 'https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz'\n            });\n\n            return this;\n\n        }\n\n        tokenRefresh(failure?:boolean) {\n\n            if (!failure) {\n\n                this.apiCall('POST', '/restapi/oauth/token', {\n                    'access_token': 'ACCESS_TOKEN_FROM_REFRESH',\n                    'token_type': 'bearer',\n                    'expires_in': 3600,\n                    'refresh_token': 'REFRESH_TOKEN_FROM_REFRESH',\n                    'refresh_token_expires_in': 60480,\n                    'scope': 'SMS RCM Foo Boo'\n                });\n\n            } else {\n\n                this.apiCall('POST', '/restapi/oauth/token', {\n                    'message': 'Wrong token',\n                    'error_description': 'Wrong token',\n                    'description': 'Wrong token'\n                }, 400);\n\n            }\n\n            return this;\n\n        }\n\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n\nmodule RingCentral.sdk.externals {\n\n    export var _Promise:typeof Promise;\n    export var _fetch:Fetch;\n    export var _Response:typeof Response;\n    export var _Request:typeof Request;\n    export var _Headers:typeof Headers;\n    export var _PUBNUB:PUBNUB;\n\n    export function get() {\n\n        var root = Function('return this')();\n\n        if (!_PUBNUB) _PUBNUB = root.PUBNUB;\n        if (!_Promise) _Promise = root.Promise;\n        if (!_fetch) _fetch = root.fetch;\n        if (!_Headers) _Headers = root.Headers;\n        if (!_Request) _Request = root.Request;\n        if (!_Response) _Response = root.Response;\n\n        return externals;\n\n    }\n\n}\n\n","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n\nmodule RingCentral.sdk.http {\n\n    /**\n     * @TODO Bring back tests\n     */\n    export class ApiResponse {\n\n        static contentType = 'Content-Type';\n        static jsonContentType = 'application/json';\n        static multipartContentType = 'multipart/mixed';\n        static urlencodedContentType = 'application/x-www-form-urlencoded';\n        static headerSeparator = ':';\n        static bodySeparator = '\\n\\n';\n        static boundarySeparator = '--';\n\n        protected _json:any;\n        protected _text:string;\n        protected _request:Request;\n        protected _response:Response;\n        protected _multipartTransactions:ApiResponse[];\n\n        constructor(request?:Request, response?:Response, responseText?:string) {\n\n            this._text = responseText;\n            this._request = request;\n            this._response = response;\n            this._json = null;\n            this._multipartTransactions = null;\n\n        }\n\n        response() {\n            return this._response;\n        }\n\n        request() {\n            return this._request;\n        }\n\n        ok() {\n            return this._response && this._response.ok;\n        }\n\n        text() {\n            return this._text;\n        }\n\n        json() {\n\n            if (!this._isJson()) throw new Error('Response is not JSON');\n\n            if (!this._json) {\n                this._json = this._text ? JSON.parse(this._text) : null;\n            }\n\n            return this._json;\n\n        }\n\n        error(skipOKCheck?:boolean) {\n\n            if (this.ok() && !skipOKCheck) return null;\n\n            var message = (this._response && this._response.status ? this._response.status + ' ' : '') +\n                          (this._response && this._response.statusText ? this._response.statusText : '');\n\n            try {\n\n                var json = this.json();\n\n                if (json.message) message = json.message;\n                if (json.error_description) message = json.error_description;\n                if (json.description) message = json.description;\n\n            } catch (ex) {}\n\n            return message;\n\n        }\n\n        multipart():ApiResponse[] {\n\n            if (!this._isMultipart()) throw new Error('Response is not multipart');\n\n            if (null === this._multipartTransactions) {\n\n                // Step 1. Split multipart response\n\n                if (!this._text) throw new Error('No response body');\n\n                var boundary = this._response.headers.get('Content-Type').match(/boundary=([^;]+)/i)[1];\n\n                if (!boundary) throw new Error('Cannot find boundary');\n\n                var parts = this._text.toString().split(ApiResponse.boundarySeparator + boundary);\n\n                if (parts[0].trim() === '') parts.shift();\n                if (parts[parts.length - 1].trim() == ApiResponse.boundarySeparator) parts.pop();\n\n                if (parts.length < 1) throw new Error('No parts in body');\n\n                // Step 2. Parse status info\n\n                var statusInfo = ApiResponse.create(parts.shift(), this._response.status, this._response.statusText);\n\n                // Step 3. Parse all other parts\n\n                this._multipartTransactions = parts.map((part:string, i) => { //FIXME It will not work since parts contain both headers and body\n\n                    var status = statusInfo.json().response[i].status;\n\n                    return ApiResponse.create(part, status);\n\n                });\n\n            }\n\n            return this._multipartTransactions;\n\n        }\n\n        /**\n         * Short-hand method to get only JSON content of responses\n         */\n        multipartJson():any[] {\n\n            return this.multipart().map((res)=> {\n                return res.json();\n            });\n\n        }\n\n        protected _isContentType(contentType:string):boolean {\n            return this._getContentType().indexOf(contentType) > -1;\n        }\n\n        protected _getContentType():string {\n            return this._response.headers.get(ApiResponse.contentType) || '';\n        }\n\n        protected _isMultipart():boolean {\n            return this._isContentType(ApiResponse.multipartContentType);\n        }\n\n        protected _isUrlEncoded():boolean {\n            return this._isContentType(ApiResponse.urlencodedContentType);\n        }\n\n        protected _isJson():boolean {\n            return this._isContentType(ApiResponse.jsonContentType);\n        }\n\n        /**\n         * Method is used to create Transaction objects from string parts of multipart/mixed response\n         * @param text\n         * @param status\n         * @param statusText\n         * @return {ApiResponse}\n         */\n        static create(text?:string, status?:number, statusText?:string):ApiResponse {\n\n            status = status || 200;\n            statusText = statusText || 'OK';\n\n            text = text.replace(/\\r/g, '');\n\n            var headers = new externals._Headers(),\n                headersAndBody = text.split(ApiResponse.bodySeparator),\n                headersText = (headersAndBody.length > 1) ? headersAndBody.shift() : '';\n\n            text = headersAndBody.join(ApiResponse.bodySeparator);\n\n            (headersText || '')\n                .split('\\n')\n                .forEach((header:string) => {\n\n                    var split = header.trim().split(ApiResponse.headerSeparator),\n                        key = split.shift().trim(),\n                        value = split.join(ApiResponse.headerSeparator).trim();\n\n                    if (key) headers.append(key, value);\n\n                });\n\n            return new ApiResponse(null, Client.createResponse(text, {\n                headers: headers,\n                status: status,\n                statusText: statusText\n            }), text);\n\n        }\n\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../mocks/Registry.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./ApiResponse.ts\" />\n\nmodule RingCentral.sdk.http {\n\n    var allowedMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'];\n\n    export class Client extends core.Observable<Client> {\n\n        public events = {\n            beforeRequest: 'beforeRequest', // parameters: ajax\n            requestSuccess: 'requestSuccess', // means that response was successfully fetched from server\n            requestError: 'requestError' // means that request failed completely\n        };\n\n        sendRequest(request:Request):Promise<ApiResponse> {\n\n            var res = new ApiResponse(request); //FIXME Potential leak\n\n            return new externals._Promise((resolve) => {\n\n                //TODO Stop request if listeners return false\n                this.emit(this.events.beforeRequest, res);\n\n                resolve(this._loadResponse(request));\n\n            })\n                .then((response:Response) => {\n\n                    res['_response'] = Client.cloneResponse(response);\n\n                    return response.text();\n\n                })\n                .then((text:string) => {\n\n                    res['_text'] = text;\n\n                    if (!res.ok()) throw Client.makeError(new Error('Response has unsuccessful status'), res);\n\n                    this.emit(this.events.requestSuccess, res);\n\n                    return res;\n\n                })\n                .catch((e:IApiError):any=> {\n\n                    if (!e.apiResponse) {\n                        // we don't pass response since most likely it's parsing caused an error\n                        e = Client.makeError(e, res);\n                    }\n\n                    this.emit(this.events.requestError, e);\n\n                    throw e;\n\n                });\n\n        }\n\n        protected _loadResponse(request:Request):Promise<Response> {\n            return externals._fetch.call(null, request);\n        }\n\n        /**\n         * Wraps the JS Error object with transaction information\n         * @param {Error} e\n         * @param {ApiResponse} apiResponse\n         * @return {IApiError}\n         */\n        static makeError(e:Error, apiResponse?:ApiResponse) {\n\n            var error = <IApiError>e;\n\n            // Wrap only if regular error\n            if (!error.hasOwnProperty('apiResponse') && !error.hasOwnProperty('originalMessage')) {\n\n                error.apiResponse = apiResponse;\n                error.originalMessage = error.message;\n                error.message = (apiResponse && apiResponse.error(true)) || error.originalMessage;\n\n            }\n\n            return error;\n\n        }\n\n        /**\n         * TODO Wait for\n         *   - https://github.com/github/fetch/issues/185\n         *   - https://github.com/bitinn/node-fetch/issues/34\n         * @param {Response} response\n         * @return {Response}\n         */\n        static cloneResponse(response:Response):Response {\n\n            if (core.utils.isFunction(response.clone)) return response.clone();\n\n            var body = '';\n\n            if (response.hasOwnProperty('_bodyInit')) body = response['_bodyInit'];\n            if (response.hasOwnProperty('_bodyText')) body = response['_bodyText'];\n            if (response.hasOwnProperty('_bodyBlob')) body = response['_bodyBlob'].slice();\n            if (response.hasOwnProperty('_bodyFormData')) body = response['_bodyFormData'];\n\n            if (response.hasOwnProperty('_raw')) body = response['_raw'].join('');\n\n            var clone = new externals._Response(body, response);\n\n            if (response.hasOwnProperty('body')) clone['body'] = response['body']; // accessing non-standard properties\n\n            return clone;\n\n        }\n\n        /**\n         * Creates a response\n         * @param stringBody\n         * @param init\n         * @return {Response}\n         */\n        static createResponse(stringBody?:string, init?:ResponseInit):Response {\n\n            init = init || <ResponseInit>{};\n\n            return new externals._Response(stringBody, init);\n\n        }\n\n        static createRequest(input:string|Request, init?:IClientRequestInit) {\n\n            init = init || {};\n\n            var body = init.body;\n\n            // Assign request with empty body, Github's fetch throws errors if it cannot recognize the body type\n            var req = new externals._Request(input, core.utils.extend({}, init, {body: null}));\n\n            if (!req.url) throw new Error('Url is not defined');\n            if (!req.method) req.method = 'GET';\n            if (req.method && allowedMethods.indexOf(req.method) < 0) throw new Error('Method has wrong value: ' + req.method);\n\n            if (!req.headers.has('Accept')) req.headers.set('Accept', 'application/json');\n\n            // Serialize body\n            if (core.utils.isPlainObject(init.body) || !init.body) {\n\n                if (!req.headers.has('Content-Type')) req.headers.set('Content-Type', 'application/json');\n\n                var contentType = req.headers.get('Content-Type');\n\n                if (contentType.indexOf('application/json') > -1) {\n\n                    body = JSON.stringify(init.body);\n\n                } else if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n\n                    body = core.utils.queryStringify(init.body);\n\n                }\n\n            }\n\n            req.credentials = 'include';\n            req.mode = 'cors';\n\n            if (init.query) {\n                req.url = req.url + (req.url.indexOf('?') > -1 ? '&' : '?') + core.utils.queryStringify(init.query);\n            }\n\n            // Create another request with encoded body\n            req = new externals._Request(req.url, core.utils.extend(req, {body: body}));\n\n            // Keep the original body accessible directly (for mocks)\n            req.body = init.body;\n\n            return req;\n\n        }\n\n    }\n\n    export interface IApiError extends Error {\n        stack?:string;\n        originalMessage:string;\n        apiResponse:ApiResponse;\n    }\n\n    export interface IClientRequestInit extends RequestInit {\n        query?: string;\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n\nmodule RingCentral.sdk.platform {\n\n    export class Queue {\n\n        protected _cacheId:string;\n        protected _pollInterval:number;\n        protected _releaseTimeout:number;\n\n        protected _cache:core.Cache;\n        protected _promise:Promise<any>;\n\n        constructor(cache:core.Cache, cacheId:string) {\n\n            this._cache = cache;\n            this._cacheId = cacheId;\n\n            this.setPollInterval(250);\n            this.setReleaseTimeout(5000); // If queue was not released then force it to do so after some timeout\n\n        }\n\n        isPaused() {\n\n            var storage = this._cache,\n                cacheId = this._cacheId,\n                time = storage.getItem(cacheId);\n\n            return !!time && Date.now() - parseInt(time) < this._releaseTimeout;\n        }\n\n        pause() {\n            this._cache.setItem(this._cacheId, Date.now());\n            return this;\n        }\n\n        resume() {\n            this._cache.removeItem(this._cacheId);\n            return this;\n        }\n\n        poll() {\n\n            if (this._promise) return this._promise;\n\n            this._promise = new externals._Promise((resolve, reject) => {\n\n                core.utils.poll((next) => {\n\n                    if (this.isPaused()) return next();\n\n                    this._promise = null;\n\n                    this.resume(); // this is actually not needed but why not\n\n                    resolve(null);\n\n                }, this._pollInterval);\n\n            });\n\n            return this._promise;\n\n        }\n\n        releaseTimeout() {\n            return this._releaseTimeout;\n        }\n\n        pollInterval() {\n            return this._pollInterval;\n        }\n\n        setReleaseTimeout(releaseTimeout:number) {\n            this._releaseTimeout = releaseTimeout;\n            return this;\n        }\n\n        setPollInterval(pollInterval:number) {\n            this._pollInterval = pollInterval;\n            return this;\n        }\n\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../core/Cache.ts\" />\n/// <reference path=\"../core/Log\" />\n/// <reference path=\"../http/Client.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./Queue.ts\" />\n\nmodule RingCentral.sdk.platform {\n\n    export class Platform extends core.Observable<Platform> {\n\n        protected static _urlPrefix:string = '/restapi';\n        protected static _apiVersion:string = 'v1.0';\n        protected static _accessTokenTtl:number = null; // Platform server by default sets it to 60 * 60 = 1 hour\n        protected static _refreshTokenTtl:number = 10 * 60 * 60; // 10 hours\n        protected static _refreshTokenTtlRemember:number = 7 * 24 * 60 * 60; // 1 week\n        protected static _tokenEndpoint:string = '/restapi/oauth/token';\n        protected static _revokeEndpoint:string = '/restapi/oauth/revoke';\n        protected static _authorizeEndpoint:string = '/restapi/oauth/authorize';\n\n        protected _server:string;\n        protected _appKey:string;\n        protected _appSecret:string;\n\n        protected _refreshDelayMs:number = 100;\n        protected _clearCacheOnRefreshError:boolean = true;\n        protected _cacheId:string = 'platform';\n\n        protected _queue:Queue;\n        protected _cache:core.Cache;\n        protected _client:http.Client;\n        protected _auth:Auth;\n\n        public events = {\n            accessViolation: 'accessViolation',\n            logoutSuccess: 'logoutSuccess',\n            logoutError: 'logoutError',\n            authorizeSuccess: 'authorizeSuccess',\n            authorizeError: 'authorizeError',\n            refreshSuccess: 'refreshSuccess',\n            refreshError: 'refreshError'\n        };\n\n        constructor(client:http.Client,\n                    cache:core.Cache,\n                    queue:Queue,\n                    server:string,\n                    appKey:string,\n                    appSecret:string) {\n\n            super();\n\n            this._server = server;\n            this._appKey = appKey;\n            this._appSecret = appSecret;\n\n            this._cache = cache;\n            this._client = client;\n            this._queue = new Queue(this._cache, this._cacheId + '-refresh');\n            this._auth = new Auth(this._cache, this._cacheId);\n\n        }\n\n        auth():Auth {\n            return this._auth;\n        }\n\n        createUrl(path, options?:{addMethod?: string; addToken?: boolean; addServer?: boolean}):string {\n\n            path = path || '';\n            options = options || {};\n\n            var builtUrl = '',\n                hasHttp = path.indexOf('http://') != -1 || path.indexOf('https://') != -1;\n\n            if (options.addServer && !hasHttp) builtUrl += this._server;\n\n            if (path.indexOf(Platform._urlPrefix) == -1 && !hasHttp) builtUrl += Platform._urlPrefix + '/' + Platform._apiVersion;\n\n            builtUrl += path;\n\n            if (options.addMethod || options.addToken) builtUrl += (path.indexOf('?') > -1 ? '&' : '?');\n\n            if (options.addMethod) builtUrl += '_method=' + options.addMethod;\n            if (options.addToken) builtUrl += (options.addMethod ? '&' : '') + 'access_token=' + this._auth.accessToken();\n\n            return builtUrl;\n\n        }\n\n        authUrl(options:{\n            redirectUri:string;\n            display?:string; // page|popup|touch|mobile, default 'page'\n            prompt?:string; // sso|login|consent, default is 'login sso consent'\n            state?:string;\n            brandId?:string|number;\n        }) {\n\n            options = options || <any>{};\n\n            return this.createUrl(Platform._authorizeEndpoint + '?' + core.utils.queryStringify({\n                    'response_type': 'code',\n                    'redirect_uri': options.redirectUri || '',\n                    'client_id': this._appKey,\n                    'state': options.state || '',\n                    'brand_id': options.brandId || '',\n                    'display': options.display || '',\n                    'prompt': options.prompt || ''\n                }), {addServer: true})\n\n        }\n\n        parseAuthRedirectUrl(url:string) {\n\n            var qs = core.utils.parseQueryString(url.split('?').reverse()[0]),\n                error = qs.error_description || qs.error;\n\n            if (error) {\n                var e = <IAuthError> new Error(error);\n                e.error = qs.error;\n                throw e;\n            }\n\n            return qs;\n\n        }\n\n        loggedIn():Promise<boolean> {\n\n            return this._ensureAuthentication()\n                .then(()=> {\n                    return true;\n                })\n                .catch(()=> {\n                    return false;\n                });\n\n        }\n\n        login(options?:{\n            username?:string;\n            password?: string;\n            extension?:string;\n            endpointId?:string;\n            code?:string;\n            redirectUri?:string;\n            clientId?:string;\n            remember?:boolean\n        }):Promise<http.ApiResponse> {\n\n            options = options || <any>{};\n\n            options.remember = options.remember || false;\n\n            var body = <any>{\n                \"access_token_ttl\": Platform._accessTokenTtl,\n                \"refresh_token_ttl\": options.remember ? Platform._refreshTokenTtlRemember : Platform._refreshTokenTtl\n            };\n\n            if (!options.code) {\n\n                body.grant_type = 'password';\n                body.username = options.username;\n                body.password = options.password;\n                body.extension = options.extension || '';\n\n            } else if (options.code) {\n\n                body.grant_type = 'authorization_code';\n                body.code = options.code;\n                body.redirect_uri = options.redirectUri;\n                //body.client_id = this.getCredentials().key; // not needed\n\n            }\n\n            if (options.endpointId) body.endpoint_id = options.endpointId;\n\n            return this._tokenRequest(Platform._tokenEndpoint, body).then((res:http.ApiResponse) => {\n\n                this._auth\n                    .setData(res.json())\n                    .setRemember(options.remember);\n\n                this.emit(this.events.authorizeSuccess, res);\n\n                return res;\n\n            }).catch((e:http.IApiError):any => {\n\n                this._cache.clean();\n\n                this.emit(this.events.authorizeError, e);\n\n                throw e;\n\n            });\n\n        }\n\n        refresh():Promise<http.ApiResponse> {\n\n            var refresh = <Promise<http.ApiResponse>>new externals._Promise((resolve, reject) => {\n\n                if (this._queue.isPaused()) {\n                    return resolve(this._refreshPolling());\n                }\n\n                this._queue.pause();\n\n                // Make sure all existing AJAX calls had a chance to reach the server\n                setTimeout(() => {\n\n                    core.log.debug('Platform.refresh(): Performing token refresh (access token', this._auth.accessToken(), ', refresh token', this._auth.refreshToken(), ')');\n\n                    // Perform sanity checks\n                    if (!this._auth.refreshToken()) return reject(new Error('Refresh token is missing'));\n                    if (!this._auth.refreshTokenValid()) return reject(new Error('Refresh token has expired'));\n                    if (!this._queue.isPaused()) return reject(new Error('Queue was resumed before refresh call'));\n\n                    resolve(this._tokenRequest(Platform._tokenEndpoint, {\n                        \"grant_type\": \"refresh_token\",\n                        \"refresh_token\": this._auth.refreshToken(),\n                        \"access_token_ttl\": Platform._accessTokenTtl,\n                        \"refresh_token_ttl\": this._auth.remember() ? Platform._refreshTokenTtlRemember : Platform._refreshTokenTtl\n                    }));\n\n                }, this._refreshDelayMs);\n\n            });\n\n            return refresh.then((res:http.ApiResponse) => {\n\n                // This means refresh has happened elsewhere and we are here because of timeout\n                if (res && res.json && res.json()) {\n\n                    var json = res.json();\n\n                    core.log.info('Platform.refresh(): Token was refreshed', res);\n\n                    if (!json.refresh_token || !json.access_token) {\n                        throw http.Client.makeError(new Error('Malformed OAuth response'), res);\n                    }\n\n                    this._auth.setData(json);\n                    this._queue.resume();\n\n                }\n\n                this.emit(this.events.refreshSuccess, res);\n\n                return res;\n\n            }).catch((e:http.IApiError):any => {\n\n                e = http.Client.makeError(e);\n\n                if (this._clearCacheOnRefreshError) {\n                    this._cache.clean();\n                }\n\n                this.emit(this.events.accessViolation, e);\n                this.emit(this.events.refreshError, e);\n\n                throw e;\n\n            });\n\n        }\n\n        /**\n         * @returns {Promise}\n         */\n        logout():Promise<http.ApiResponse> {\n\n            this._queue.pause();\n\n            return this._tokenRequest(Platform._revokeEndpoint, {\n                token: this._auth.accessToken()\n            }).then((res)  => {\n\n                this._queue.resume();\n                this._cache.clean();\n\n                this.emit(this.events.logoutSuccess, res);\n\n                return res;\n\n            }).catch((e:http.IApiError):any => {\n\n                this._queue.resume();\n\n                this.emit(this.events.accessViolation, e);\n                this.emit(this.events.logoutError, e);\n\n                throw e;\n\n            });\n\n        }\n\n        inflateRequest(request:Request, options?:IPlatformOptions):Promise<Request> {\n\n            options = options || {};\n\n            if (options.skipAuthCheck) return externals._Promise.resolve(request);\n\n            return this\n                ._ensureAuthentication()\n                .then(() => {\n\n                    request.headers.set('Authorization', this._authHeader());\n                    request.url = this.createUrl(request.url, {addServer: true});\n\n                    return request;\n\n                });\n\n        }\n\n        sendRequest(request:Request, options?:IPlatformOptions):Promise<http.ApiResponse> {\n\n            return this\n                .inflateRequest(request, options)\n                .then((req) => {\n                    return this._client.sendRequest(req);\n                })\n                .catch((e:http.IApiError) => {\n\n                    // Guard is for errors that come from polling\n                    if (!e.apiResponse || !e.apiResponse.response() || (e.apiResponse.response().status != 401)) throw e;\n\n                    this._auth.cancelAccessToken();\n\n                    return this.sendRequest(request, options);\n\n                });\n\n        }\n\n        /**\n         * General purpose function to send anything to server\n         */\n        send(url:string, options?:IPlatformCombinedOptions):Promise<http.ApiResponse> {\n\n            try {\n\n                // This has to be done here in order to let NodeJS Fetch to create Request\n                url = this.createUrl(url, {addServer: true});\n\n                return this.sendRequest(http.Client.createRequest(url, options), options);\n\n            } catch (e) {\n                return externals._Promise.reject(e);\n            }\n\n        }\n\n        get(url:string, options?:IPlatformCombinedOptions) {\n            options = options || {};\n            options.method = 'GET';\n            return this.send(url, options);\n        }\n\n        post(url:string, options:IPlatformCombinedOptions) {\n            options = options || {};\n            options.method = 'POST';\n            return this.send(url, options);\n        }\n\n        put(url:string, options:IPlatformCombinedOptions) {\n            options = options || {};\n            options.method = 'PUT';\n            return this.send(url, options);\n        }\n\n        'delete'(url:string, options?:IPlatformCombinedOptions) {\n            options = options || {};\n            options.method = 'DELETE';\n            return this.send(url, options);\n        }\n\n        protected _tokenRequest(path:string, body:any):Promise<http.ApiResponse> {\n\n            return this.send(path, {\n                skipAuthCheck: true,\n                body: body,\n                method: 'POST',\n                headers: {\n                    'Authorization': 'Basic ' + this._apiKey(),\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                }\n            });\n\n        }\n\n        protected _ensureAuthentication() {\n\n            if (this._isAccessTokenValid()) return externals._Promise.resolve(null);\n            return this.refresh();\n\n        }\n\n        protected _isAccessTokenValid():boolean {\n\n            return (this._auth.accessTokenValid() && !this._queue.isPaused());\n\n        }\n\n        protected _refreshPolling():Promise<any> {\n\n            core.log.warn('Platform.refresh(): Refresh is already in progress, polling started');\n\n            return this._queue.poll().then(()=> {\n\n                if (!this._isAccessTokenValid()) {\n                    throw new Error('Automatic authentification timeout');\n                }\n\n                return null;\n\n            });\n\n        }\n\n        protected _apiKey() {\n            var apiKey = this._appKey + ':' + this._appSecret;\n            return (typeof btoa == 'function') ? btoa(apiKey) : new Buffer(apiKey).toString('base64');\n        }\n\n        protected _authHeader() {\n            var token = this._auth.accessToken();\n            return this._auth.tokenType() + (token ? ' ' + token : '');\n        }\n\n    }\n\n    export interface IAuthError extends Error {\n        error?:string;\n    }\n\n    export interface IPlatformOptions {\n        skipAuthCheck?:boolean;\n    }\n\n    export interface IPlatformCombinedOptions extends IPlatformOptions, http.IClientRequestInit {}\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Log.ts\" />\n/// <reference path=\"../platform/Platform.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n\nmodule RingCentral.sdk.subscription {\n\n\n    export class Subscription extends core.Observable<Subscription> {\n\n        protected _renewHandicapMs = 2 * 60 * 1000;\n\n        protected _subscription:ISubscription|any;\n        protected _timeout;\n        protected _eventFilters:string[];\n        protected _pubnub:PUBNUBInstance;\n\n        protected _platform:platform.Platform;\n        protected _pubnubFactory:pubnub.PubnubFactory;\n\n        public events = {\n            notification: 'notification',\n            removeSuccess: 'removeSuccess',\n            removeError: 'removeError',\n            renewSuccess: 'renewSuccess',\n            renewError: 'renewError',\n            subscribeSuccess: 'subscribeSuccess',\n            subscribeError: 'subscribeError'\n        };\n\n        constructor(pubnubFactory:pubnub.PubnubFactory, platform:platform.Platform) {\n\n            super();\n\n            this._pubnubFactory = pubnubFactory;\n            this._platform = platform;\n\n            this._pubnub = null;\n            this._eventFilters = [];\n            this._timeout = null;\n            this._subscription = null;\n\n        }\n\n        alive() {\n\n            return this._subscription &&\n                   this._subscription.id &&\n                   this._subscription.deliveryMode &&\n                   this._subscription.deliveryMode.subscriberKey &&\n                   this._subscription.deliveryMode.address;\n\n        }\n\n        setSubscription(subscription) {\n\n            this._clearTimeout();\n\n            this._subscription = subscription;\n\n            if (!this._pubnub) this._subscribeAtPubnub();\n\n            this._setTimeout();\n\n            return this;\n\n        }\n\n        subscription():ISubscription {\n            return this._subscription;\n        }\n\n        /**\n         * Creates or updates subscription if there is an active one\n         * @param {{events?:string[]}} [options] New array of events\n         * @returns {Promise}\n         */\n        register(options?:{events?:string[]}):Promise<http.ApiResponse> {\n\n            if (this.alive()) {\n                return this.renew(options);\n            } else {\n                return this.subscribe(options);\n            }\n\n        }\n\n        addEvents(events:string[]) {\n            this._eventFilters = this._eventFilters.concat(events);\n            return this;\n        }\n\n        setEvents(events:string[]) {\n            this._eventFilters = events;\n            return this;\n        }\n\n        subscribe(options?:{events?:string[]}):Promise<http.ApiResponse> {\n\n            options = options || {};\n\n            if (options.events) this.setEvents(options.events);\n\n            this._clearTimeout();\n\n            return <Promise<http.ApiResponse>>new externals._Promise((resolve, reject) => {\n\n                if (!this._eventFilters || !this._eventFilters.length) throw new Error('Events are undefined');\n\n                resolve(this._platform.post('/restapi/v1.0/subscription', {\n                    body: {\n                        eventFilters: this._getFullEventFilters(),\n                        deliveryMode: {\n                            transportType: 'PubNub'\n                        }\n                    }\n                }));\n\n            }).then((ajax:http.ApiResponse) => {\n\n                    this.setSubscription(ajax.json())\n                        .emit(this.events.subscribeSuccess, ajax);\n\n                    return ajax;\n\n                }).catch((e):any => {\n\n                    e = http.Client.makeError(e);\n\n                    this.reset()\n                        .emit(this.events.subscribeError, e);\n\n                    throw e;\n\n                });\n\n        }\n\n        renew(options?:{events?:string[]}):Promise<http.ApiResponse> {\n\n            options = options || {};\n\n            if (options.events) this.setEvents(options.events);\n\n            this._clearTimeout();\n\n            return <Promise<http.ApiResponse>>new externals._Promise((resolve, reject) => {\n\n                if (!this.alive()) throw new Error('Subscription is not alive');\n\n                if (!this._eventFilters || !this._eventFilters.length) throw new Error('Events are undefined');\n\n                return this._platform.put('/restapi/v1.0/subscription/' + this._subscription.id, {\n                    body: {\n                        eventFilters: this._getFullEventFilters()\n                    }\n                });\n\n            })\n                .then((ajax:http.ApiResponse) => {\n\n                    this.setSubscription(ajax.json())\n                        .emit(this.events.renewSuccess, ajax.json());\n\n                    return ajax;\n\n                })\n                .catch((e):any => {\n\n                    e = http.Client.makeError(e);\n\n                    this.reset()\n                        .emit(this.events.renewError, e);\n\n                    throw e;\n\n                });\n\n        }\n\n        remove():Promise<http.ApiResponse> {\n\n            return <Promise<http.ApiResponse>>new externals._Promise((resolve, reject)  => {\n\n                if (!this._subscription || !this._subscription.id) throw new Error('Subscription ID is required');\n\n                resolve(this._platform.delete('/restapi/v1.0/subscription/' + this._subscription.id));\n\n            }).then((ajax:http.ApiResponse) => {\n\n                    this.reset()\n                        .emit(this.events.removeSuccess, ajax);\n\n                    return ajax;\n\n                }).catch((e):any => {\n\n                    e = http.Client.makeError(e);\n\n                    this.emit(this.events.removeError, e);\n\n                    throw e;\n\n                });\n\n        }\n\n        /**\n         * Remove subscription and disconnect from PUBNUB\n         * This method resets subscription at client side but backend is not notified\n         */\n        reset() {\n            this._clearTimeout();\n            if (this.alive() && this._pubnub) this._pubnub.unsubscribe({channel: this._subscription.deliveryMode.address});\n            this._subscription = null;\n            return this;\n        }\n\n        destroy():Subscription {\n\n            this.reset();\n\n            core.log.info('RC.subscription.Subscription: Destroyed');\n\n            return super.destroy();\n\n        }\n\n        protected _getFullEventFilters() {\n\n            return this._eventFilters.map((event) => {\n                return this._platform.createUrl(event);\n            });\n\n        }\n\n        protected _setTimeout() {\n\n            this._clearTimeout();\n\n            if (!this.alive()) throw new Error('Subscription is not alive');\n\n            var timeToExpiration = (this._subscription.expiresIn * 1000) - this._renewHandicapMs;\n\n            this._timeout = setTimeout(() => {\n\n                this.renew({});\n\n            }, timeToExpiration);\n\n            return this;\n\n        }\n\n        protected _clearTimeout() {\n\n            clearTimeout(this._timeout);\n\n            return this;\n\n        }\n\n        protected _decrypt(message:any) {\n\n            if (!this.alive()) throw new Error('Subscription is not alive');\n\n            if (this._subscription.deliveryMode.encryptionKey) {\n\n                var PUBNUB = this._pubnubFactory.getPubnub();\n\n                message = PUBNUB.crypto_obj.decrypt(message, this._subscription.deliveryMode.encryptionKey, {\n                    encryptKey: false,\n                    keyEncoding: 'base64',\n                    keyLength: 128,\n                    mode: 'ecb'\n                });\n\n            }\n\n            return message;\n\n        }\n\n        protected _notify(message:any) {\n\n            this.emit(this.events.notification, this._decrypt(message));\n\n            return this;\n\n        }\n\n        protected _subscribeAtPubnub():Subscription {\n\n            if (!this.alive()) throw new Error('Subscription is not alive');\n\n            var PUBNUB = this._pubnubFactory.getPubnub();\n\n            this._pubnub = PUBNUB.init({\n                ssl: true,\n                subscribe_key: this._subscription.deliveryMode.subscriberKey\n            });\n\n            this._pubnub.ready();\n\n            this._pubnub.subscribe({\n                channel: this._subscription.deliveryMode.address,\n                message: (message, env, channel) => {\n\n                    core.log.info('RC.core.Subscription: Incoming message', message);\n                    this._notify(message);\n\n                },\n                connect: () => {\n                    core.log.info('RC.core.Subscription: PUBNUB connected');\n                }\n            });\n\n            return this;\n\n        }\n\n    }\n\n    export interface ISubscription {\n        id?:string;\n        uri?: string;\n        eventFilters?:string[];\n        expirationTime?:string; // 2014-03-12T19:54:35.613Z\n        expiresIn?:number;\n        deliveryMode?: {\n            transportType?:string;\n            encryption?:boolean;\n            address?:string;\n            subscriberKey?:string;\n            encryptionKey?:string;\n            secretKey?:string;\n        };\n        creationTime?:string; // 2014-03-12T19:54:35.613Z\n        status?:string; // Active\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n\nmodule RingCentral.sdk.pubnub {\n\n    export class PubnubMock extends core.Observable<PubnubMock> implements PUBNUBInstance {\n\n        private options:PUBNUBInitOptions;\n        crypto_obj:PUBNUBCryptoObj;\n\n        constructor(options:PUBNUBInitOptions) {\n            super();\n            this.options = options;\n            this.crypto_obj = externals._PUBNUB.crypto_obj;\n        }\n\n        ready() {}\n\n        subscribe(options:PUBNUBSubscribeOptions) {\n            this.on('message-' + options.channel, options.message);\n        }\n\n        unsubscribe(options:PUBNUBUnsubscribeOptions) {\n            this.off('message-' + options.channel);\n        }\n\n        receiveMessage(msg, channel) {\n            this.emit('message-' + channel, msg, 'env', channel);\n        }\n\n    }\n\n    export class PubnubMockFactory implements PUBNUB {\n\n        crypto_obj:PUBNUBCryptoObj;\n\n        constructor() {\n            this.crypto_obj = externals._PUBNUB.crypto_obj;\n        }\n\n        init(options:PUBNUBInitOptions) {\n            return new PubnubMock(options);\n        }\n\n    }\n\n}","/// <reference path=\"../pubnub/PubnubMock.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n\nmodule RingCentral.sdk.pubnub {\n\n    export class PubnubFactory {\n\n        private _useMock:boolean = false;\n        private _mock:PubnubMockFactory;\n\n        constructor(flag:boolean) {\n            this._useMock = !!flag;\n            this._mock = new PubnubMockFactory();\n        }\n\n        getPubnub():PUBNUB {\n            return this._useMock ? this._mock : externals._PUBNUB;\n        }\n\n    }\n\n}","/// <reference path=\"./externals.d.ts\" />\n/// <reference path=\"./core/Cache.ts\" />\n/// <reference path=\"./core/Log.ts\" />\n/// <reference path=\"./core/Observable.ts\" />\n/// <reference path=\"./core/PageVisibility.ts\" />\n/// <reference path=\"./core/Utils.ts\" />\n/// <reference path=\"./http/Client.ts\" />\n/// <reference path=\"./platform/Platform.ts\" />\n/// <reference path=\"./platform/Queue.ts\" />\n/// <reference path=\"./subscription/Subscription.ts\" />\n/// <reference path=\"./pubnub/PubnubFactory.ts\" />\n/// <reference path=\"./externals/Externals.ts\" />\n\nmodule RingCentral.sdk {\n\n    export class SDK {\n\n        static version = '2.0.0';\n\n        static server = {\n            sandbox: 'https://platform.devtest.ringcentral.com',\n            production: 'https://platform.ringcentral.com'\n        };\n\n        private _platform:platform.Platform;\n        private _cache:core.Cache;\n        private _queue:platform.Queue;\n        private _client:http.Client;\n        private _pubnubFactory:pubnub.PubnubFactory;\n        private _mockRegistry:mocks.Registry;\n\n        constructor(options?:{\n            server:string;\n            appKey:string;\n            appSecret:string;\n            appName?:string;\n            appVersion?:string;\n            cachePrefix?:string;\n            useHttpMock?:boolean;\n            usePubnubMock?:boolean;\n        }) {\n\n            options = options || <any>{};\n\n            externals.get();\n\n            this._mockRegistry = new mocks.Registry();\n\n            this._cache = new core.Cache(typeof localStorage !== 'undefined' ? localStorage : <Storage>{}, options.cachePrefix);\n\n            this._queue = new platform.Queue(this._cache, 'platform-refresh');\n\n            this._client = options.useHttpMock ? new http.ClientMock(this._mockRegistry) : new http.Client();\n\n            this._platform = new platform.Platform(this._client, this._cache, this._queue, options.server, options.appKey, options.appSecret);\n\n            this._pubnubFactory = new pubnub.PubnubFactory(options.usePubnubMock);\n\n            //TODO Link Platform events with Subscriptions and the rest\n\n        }\n\n        platform():platform.Platform {\n            return this._platform;\n        }\n\n        cache():core.Cache {\n            return this._cache;\n        }\n\n        createSubscription():subscription.Subscription {\n            return new subscription.Subscription(this._pubnubFactory, this._platform);\n        }\n\n        createPageVisibility() {\n            return new core.PageVisibility();\n        }\n\n        createObservable() {\n            return new core.Observable();\n        }\n\n        log() {\n            return core.log;\n        }\n\n        utils() {\n            return core.utils;\n        }\n\n        mockRegistry() { return this._mockRegistry; }\n\n    }\n\n}\n\nvar e = RingCentral.sdk.externals.get();\n\nif (typeof define === 'function' && define.amd) {\n\n    define(['pubnub'], function(PUBNUB) {\n        e._PUBNUB = PUBNUB;\n        return RingCentral.sdk;\n    });\n\n} else if (typeof module === 'object' && module.exports) {\n\n    e._PUBNUB = require('pubnub');\n    e._Promise = typeof (Promise) !== 'undefined' ? Promise : require('es6-promise').Promise;\n    e._fetch = require('node-fetch');\n    e._Request = e._fetch['Request'];\n    e._Response = e._fetch['Response'];\n    e._Headers = e._fetch['Headers'];\n\n    module.exports = RingCentral.sdk;\n\n} else {\n\n    //TODO noConflict\n\n}\n","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../mocks/Registry.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./ApiResponse.ts\" />\n\nmodule RingCentral.sdk.http {\n\n    export class ClientMock extends Client {\n\n        private _registry:mocks.Registry;\n\n        constructor(registry:mocks.Registry) {\n            super();\n            this._registry = registry;\n        }\n\n        protected _loadResponse(request:Request):Promise<Response> {\n\n            return new externals._Promise((resolve) => {\n\n                core.log.debug('API REQUEST', request.method, request.url);\n\n                var mock = this._registry.find(request);\n\n                resolve(mock.getResponse(request));\n\n            });\n\n        }\n\n    }\n\n}","/// <reference path=\"../externals.d.ts\" />\n/// <reference path=\"../core/Utils.ts\" />\n/// <reference path=\"../core/Observable.ts\" />\n/// <reference path=\"../core/Cache.ts\" />\n/// <reference path=\"../core/Log\" />\n/// <reference path=\"../http/Client.ts\" />\n/// <reference path=\"../http/ApiResponse.ts\" />\n/// <reference path=\"../externals/Externals.ts\" />\n/// <reference path=\"./Queue.ts\" />\n\nmodule RingCentral.sdk.platform {\n\n    export class Auth {\n\n        static refreshHandicapMs:number = 60 * 1000; // 1 minute\n        static forcedTokenType = 'forced';\n\n        protected _cacheId:string;\n        protected _cache:core.Cache;\n\n        constructor(cache:core.Cache, cacheId:string) {\n\n            this._cache = cache;\n            this._cacheId = cacheId;\n\n        }\n\n        accessToken() {\n            return this.data().access_token;\n        }\n\n        refreshToken() {\n            return this.data().refresh_token;\n        }\n\n        tokenType() {\n            return this.data().token_type;\n        }\n\n        data():IAuthData {\n\n            return this._cache.getItem(this._cacheId) || {\n                    token_type: '',\n                    access_token: '',\n                    expires_in: 0,\n                    refresh_token: '',\n                    refresh_token_expires_in: 0\n                };\n\n        }\n\n        setData(authData:IAuthData) {\n\n            var oldAuthData = this.data();\n\n            authData = core.utils.extend({}, oldAuthData, authData);\n\n            authData.expire_time = Date.now() + (authData.expires_in * 1000);\n            authData.refresh_token_expire_time = Date.now() + (authData.refresh_token_expires_in * 1000);\n\n            core.log.info('Auth.setData(): Tokens were updated, new:', authData, ', old:', oldAuthData);\n\n            this._cache.setItem(this._cacheId, authData);\n\n            return this;\n\n        }\n\n        /**\n         * Check if there is a valid (not expired) access token\n         */\n        accessTokenValid():boolean {\n\n            var authData = this.data();\n            return (authData.token_type === Auth.forcedTokenType || (authData.expire_time - Auth.refreshHandicapMs > Date.now()));\n\n        }\n\n        /**\n         * Check if there is a valid (not expired) access token\n         */\n        refreshTokenValid():boolean {\n\n            return (this.data().refresh_token_expire_time > Date.now());\n\n        }\n\n        cancelAccessToken() {\n\n            return this.setData({\n                access_token: '',\n                expires_in: 0\n            });\n\n        }\n\n        /**\n         * This method sets a special authentication mode used in Service Web\n         * @return {Platform}\n         */\n        forceAuthentication() {\n\n            this.setData(<IAuthData>{\n                token_type: Auth.forcedTokenType,\n                access_token: '',\n                expires_in: 0,\n                refresh_token: '',\n                refresh_token_expires_in: 0\n            });\n\n            return this;\n\n        }\n\n        setRemember(remember?:boolean):Auth {\n\n            return this.setData({remember: remember});\n\n        }\n\n        remember():boolean {\n\n            return !!this.data().remember;\n\n        }\n\n    }\n\n\n    export interface IAuthData {\n        remember?:boolean;\n        token_type?:string;\n        access_token?:string;\n        expires_in?:number; // actually it's string\n        expire_time?:number;\n        refresh_token?:string;\n        refresh_token_expires_in?:number; // actually it's string\n        refresh_token_expire_time?:number;\n        scope?:string;\n    }\n\n}"],"sourceRoot":"/source/"}